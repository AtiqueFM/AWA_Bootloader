
AWA_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003460  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .mysection    00000000  08000000  08000000  00010070  2**0
                  CONTENTS
  3 .rodata       0000017c  080075f0  080075f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800776c  0800776c  00010070  2**0
                  CONTENTS
  5 .ARM          00000008  0800776c  0800776c  0000776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08007774  08007774  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08007774  08007774  00007774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08007778  08007778  00007778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000070  20000000  0800777c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000005e0  20000070  080077ec  00010070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000650  080077ec  00010650  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ddb  00000000  00000000  000100a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001e76  00000000  00000000  00019e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000850  00000000  00000000  0001bcf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000758  00000000  00000000  0001c548  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00020d52  00000000  00000000  0001cca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000809a  00000000  00000000  0003d9f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000c305f  00000000  00000000  00045a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00108aeb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002330  00000000  00000000  00108b68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	20000070 	.word	0x20000070
 80041ac:	00000000 	.word	0x00000000
 80041b0:	080075d8 	.word	0x080075d8

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	20000074 	.word	0x20000074
 80041cc:	080075d8 	.word	0x080075d8

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_uldivmod>:
 8004270:	b953      	cbnz	r3, 8004288 <__aeabi_uldivmod+0x18>
 8004272:	b94a      	cbnz	r2, 8004288 <__aeabi_uldivmod+0x18>
 8004274:	2900      	cmp	r1, #0
 8004276:	bf08      	it	eq
 8004278:	2800      	cmpeq	r0, #0
 800427a:	bf1c      	itt	ne
 800427c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8004280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004284:	f000 b972 	b.w	800456c <__aeabi_idiv0>
 8004288:	f1ad 0c08 	sub.w	ip, sp, #8
 800428c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8004290:	f000 f806 	bl	80042a0 <__udivmoddi4>
 8004294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800429c:	b004      	add	sp, #16
 800429e:	4770      	bx	lr

080042a0 <__udivmoddi4>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	9e08      	ldr	r6, [sp, #32]
 80042a6:	4604      	mov	r4, r0
 80042a8:	4688      	mov	r8, r1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d14b      	bne.n	8004346 <__udivmoddi4+0xa6>
 80042ae:	428a      	cmp	r2, r1
 80042b0:	4615      	mov	r5, r2
 80042b2:	d967      	bls.n	8004384 <__udivmoddi4+0xe4>
 80042b4:	fab2 f282 	clz	r2, r2
 80042b8:	b14a      	cbz	r2, 80042ce <__udivmoddi4+0x2e>
 80042ba:	f1c2 0720 	rsb	r7, r2, #32
 80042be:	fa01 f302 	lsl.w	r3, r1, r2
 80042c2:	fa20 f707 	lsr.w	r7, r0, r7
 80042c6:	4095      	lsls	r5, r2
 80042c8:	ea47 0803 	orr.w	r8, r7, r3
 80042cc:	4094      	lsls	r4, r2
 80042ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80042d2:	0c23      	lsrs	r3, r4, #16
 80042d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80042d8:	fa1f fc85 	uxth.w	ip, r5
 80042dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80042e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80042e4:	fb07 f10c 	mul.w	r1, r7, ip
 80042e8:	4299      	cmp	r1, r3
 80042ea:	d909      	bls.n	8004300 <__udivmoddi4+0x60>
 80042ec:	18eb      	adds	r3, r5, r3
 80042ee:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80042f2:	f080 811b 	bcs.w	800452c <__udivmoddi4+0x28c>
 80042f6:	4299      	cmp	r1, r3
 80042f8:	f240 8118 	bls.w	800452c <__udivmoddi4+0x28c>
 80042fc:	3f02      	subs	r7, #2
 80042fe:	442b      	add	r3, r5
 8004300:	1a5b      	subs	r3, r3, r1
 8004302:	b2a4      	uxth	r4, r4
 8004304:	fbb3 f0fe 	udiv	r0, r3, lr
 8004308:	fb0e 3310 	mls	r3, lr, r0, r3
 800430c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004310:	fb00 fc0c 	mul.w	ip, r0, ip
 8004314:	45a4      	cmp	ip, r4
 8004316:	d909      	bls.n	800432c <__udivmoddi4+0x8c>
 8004318:	192c      	adds	r4, r5, r4
 800431a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800431e:	f080 8107 	bcs.w	8004530 <__udivmoddi4+0x290>
 8004322:	45a4      	cmp	ip, r4
 8004324:	f240 8104 	bls.w	8004530 <__udivmoddi4+0x290>
 8004328:	3802      	subs	r0, #2
 800432a:	442c      	add	r4, r5
 800432c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004330:	eba4 040c 	sub.w	r4, r4, ip
 8004334:	2700      	movs	r7, #0
 8004336:	b11e      	cbz	r6, 8004340 <__udivmoddi4+0xa0>
 8004338:	40d4      	lsrs	r4, r2
 800433a:	2300      	movs	r3, #0
 800433c:	e9c6 4300 	strd	r4, r3, [r6]
 8004340:	4639      	mov	r1, r7
 8004342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004346:	428b      	cmp	r3, r1
 8004348:	d909      	bls.n	800435e <__udivmoddi4+0xbe>
 800434a:	2e00      	cmp	r6, #0
 800434c:	f000 80eb 	beq.w	8004526 <__udivmoddi4+0x286>
 8004350:	2700      	movs	r7, #0
 8004352:	e9c6 0100 	strd	r0, r1, [r6]
 8004356:	4638      	mov	r0, r7
 8004358:	4639      	mov	r1, r7
 800435a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435e:	fab3 f783 	clz	r7, r3
 8004362:	2f00      	cmp	r7, #0
 8004364:	d147      	bne.n	80043f6 <__udivmoddi4+0x156>
 8004366:	428b      	cmp	r3, r1
 8004368:	d302      	bcc.n	8004370 <__udivmoddi4+0xd0>
 800436a:	4282      	cmp	r2, r0
 800436c:	f200 80fa 	bhi.w	8004564 <__udivmoddi4+0x2c4>
 8004370:	1a84      	subs	r4, r0, r2
 8004372:	eb61 0303 	sbc.w	r3, r1, r3
 8004376:	2001      	movs	r0, #1
 8004378:	4698      	mov	r8, r3
 800437a:	2e00      	cmp	r6, #0
 800437c:	d0e0      	beq.n	8004340 <__udivmoddi4+0xa0>
 800437e:	e9c6 4800 	strd	r4, r8, [r6]
 8004382:	e7dd      	b.n	8004340 <__udivmoddi4+0xa0>
 8004384:	b902      	cbnz	r2, 8004388 <__udivmoddi4+0xe8>
 8004386:	deff      	udf	#255	; 0xff
 8004388:	fab2 f282 	clz	r2, r2
 800438c:	2a00      	cmp	r2, #0
 800438e:	f040 808f 	bne.w	80044b0 <__udivmoddi4+0x210>
 8004392:	1b49      	subs	r1, r1, r5
 8004394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8004398:	fa1f f885 	uxth.w	r8, r5
 800439c:	2701      	movs	r7, #1
 800439e:	fbb1 fcfe 	udiv	ip, r1, lr
 80043a2:	0c23      	lsrs	r3, r4, #16
 80043a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80043a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80043ac:	fb08 f10c 	mul.w	r1, r8, ip
 80043b0:	4299      	cmp	r1, r3
 80043b2:	d907      	bls.n	80043c4 <__udivmoddi4+0x124>
 80043b4:	18eb      	adds	r3, r5, r3
 80043b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80043ba:	d202      	bcs.n	80043c2 <__udivmoddi4+0x122>
 80043bc:	4299      	cmp	r1, r3
 80043be:	f200 80cd 	bhi.w	800455c <__udivmoddi4+0x2bc>
 80043c2:	4684      	mov	ip, r0
 80043c4:	1a59      	subs	r1, r3, r1
 80043c6:	b2a3      	uxth	r3, r4
 80043c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80043cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80043d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80043d4:	fb08 f800 	mul.w	r8, r8, r0
 80043d8:	45a0      	cmp	r8, r4
 80043da:	d907      	bls.n	80043ec <__udivmoddi4+0x14c>
 80043dc:	192c      	adds	r4, r5, r4
 80043de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80043e2:	d202      	bcs.n	80043ea <__udivmoddi4+0x14a>
 80043e4:	45a0      	cmp	r8, r4
 80043e6:	f200 80b6 	bhi.w	8004556 <__udivmoddi4+0x2b6>
 80043ea:	4618      	mov	r0, r3
 80043ec:	eba4 0408 	sub.w	r4, r4, r8
 80043f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80043f4:	e79f      	b.n	8004336 <__udivmoddi4+0x96>
 80043f6:	f1c7 0c20 	rsb	ip, r7, #32
 80043fa:	40bb      	lsls	r3, r7
 80043fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8004400:	ea4e 0e03 	orr.w	lr, lr, r3
 8004404:	fa01 f407 	lsl.w	r4, r1, r7
 8004408:	fa20 f50c 	lsr.w	r5, r0, ip
 800440c:	fa21 f30c 	lsr.w	r3, r1, ip
 8004410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8004414:	4325      	orrs	r5, r4
 8004416:	fbb3 f9f8 	udiv	r9, r3, r8
 800441a:	0c2c      	lsrs	r4, r5, #16
 800441c:	fb08 3319 	mls	r3, r8, r9, r3
 8004420:	fa1f fa8e 	uxth.w	sl, lr
 8004424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8004428:	fb09 f40a 	mul.w	r4, r9, sl
 800442c:	429c      	cmp	r4, r3
 800442e:	fa02 f207 	lsl.w	r2, r2, r7
 8004432:	fa00 f107 	lsl.w	r1, r0, r7
 8004436:	d90b      	bls.n	8004450 <__udivmoddi4+0x1b0>
 8004438:	eb1e 0303 	adds.w	r3, lr, r3
 800443c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8004440:	f080 8087 	bcs.w	8004552 <__udivmoddi4+0x2b2>
 8004444:	429c      	cmp	r4, r3
 8004446:	f240 8084 	bls.w	8004552 <__udivmoddi4+0x2b2>
 800444a:	f1a9 0902 	sub.w	r9, r9, #2
 800444e:	4473      	add	r3, lr
 8004450:	1b1b      	subs	r3, r3, r4
 8004452:	b2ad      	uxth	r5, r5
 8004454:	fbb3 f0f8 	udiv	r0, r3, r8
 8004458:	fb08 3310 	mls	r3, r8, r0, r3
 800445c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8004460:	fb00 fa0a 	mul.w	sl, r0, sl
 8004464:	45a2      	cmp	sl, r4
 8004466:	d908      	bls.n	800447a <__udivmoddi4+0x1da>
 8004468:	eb1e 0404 	adds.w	r4, lr, r4
 800446c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004470:	d26b      	bcs.n	800454a <__udivmoddi4+0x2aa>
 8004472:	45a2      	cmp	sl, r4
 8004474:	d969      	bls.n	800454a <__udivmoddi4+0x2aa>
 8004476:	3802      	subs	r0, #2
 8004478:	4474      	add	r4, lr
 800447a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800447e:	fba0 8902 	umull	r8, r9, r0, r2
 8004482:	eba4 040a 	sub.w	r4, r4, sl
 8004486:	454c      	cmp	r4, r9
 8004488:	46c2      	mov	sl, r8
 800448a:	464b      	mov	r3, r9
 800448c:	d354      	bcc.n	8004538 <__udivmoddi4+0x298>
 800448e:	d051      	beq.n	8004534 <__udivmoddi4+0x294>
 8004490:	2e00      	cmp	r6, #0
 8004492:	d069      	beq.n	8004568 <__udivmoddi4+0x2c8>
 8004494:	ebb1 050a 	subs.w	r5, r1, sl
 8004498:	eb64 0403 	sbc.w	r4, r4, r3
 800449c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80044a0:	40fd      	lsrs	r5, r7
 80044a2:	40fc      	lsrs	r4, r7
 80044a4:	ea4c 0505 	orr.w	r5, ip, r5
 80044a8:	e9c6 5400 	strd	r5, r4, [r6]
 80044ac:	2700      	movs	r7, #0
 80044ae:	e747      	b.n	8004340 <__udivmoddi4+0xa0>
 80044b0:	f1c2 0320 	rsb	r3, r2, #32
 80044b4:	fa20 f703 	lsr.w	r7, r0, r3
 80044b8:	4095      	lsls	r5, r2
 80044ba:	fa01 f002 	lsl.w	r0, r1, r2
 80044be:	fa21 f303 	lsr.w	r3, r1, r3
 80044c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80044c6:	4338      	orrs	r0, r7
 80044c8:	0c01      	lsrs	r1, r0, #16
 80044ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80044ce:	fa1f f885 	uxth.w	r8, r5
 80044d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80044d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80044da:	fb07 f308 	mul.w	r3, r7, r8
 80044de:	428b      	cmp	r3, r1
 80044e0:	fa04 f402 	lsl.w	r4, r4, r2
 80044e4:	d907      	bls.n	80044f6 <__udivmoddi4+0x256>
 80044e6:	1869      	adds	r1, r5, r1
 80044e8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80044ec:	d22f      	bcs.n	800454e <__udivmoddi4+0x2ae>
 80044ee:	428b      	cmp	r3, r1
 80044f0:	d92d      	bls.n	800454e <__udivmoddi4+0x2ae>
 80044f2:	3f02      	subs	r7, #2
 80044f4:	4429      	add	r1, r5
 80044f6:	1acb      	subs	r3, r1, r3
 80044f8:	b281      	uxth	r1, r0
 80044fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80044fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8004502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004506:	fb00 f308 	mul.w	r3, r0, r8
 800450a:	428b      	cmp	r3, r1
 800450c:	d907      	bls.n	800451e <__udivmoddi4+0x27e>
 800450e:	1869      	adds	r1, r5, r1
 8004510:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8004514:	d217      	bcs.n	8004546 <__udivmoddi4+0x2a6>
 8004516:	428b      	cmp	r3, r1
 8004518:	d915      	bls.n	8004546 <__udivmoddi4+0x2a6>
 800451a:	3802      	subs	r0, #2
 800451c:	4429      	add	r1, r5
 800451e:	1ac9      	subs	r1, r1, r3
 8004520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8004524:	e73b      	b.n	800439e <__udivmoddi4+0xfe>
 8004526:	4637      	mov	r7, r6
 8004528:	4630      	mov	r0, r6
 800452a:	e709      	b.n	8004340 <__udivmoddi4+0xa0>
 800452c:	4607      	mov	r7, r0
 800452e:	e6e7      	b.n	8004300 <__udivmoddi4+0x60>
 8004530:	4618      	mov	r0, r3
 8004532:	e6fb      	b.n	800432c <__udivmoddi4+0x8c>
 8004534:	4541      	cmp	r1, r8
 8004536:	d2ab      	bcs.n	8004490 <__udivmoddi4+0x1f0>
 8004538:	ebb8 0a02 	subs.w	sl, r8, r2
 800453c:	eb69 020e 	sbc.w	r2, r9, lr
 8004540:	3801      	subs	r0, #1
 8004542:	4613      	mov	r3, r2
 8004544:	e7a4      	b.n	8004490 <__udivmoddi4+0x1f0>
 8004546:	4660      	mov	r0, ip
 8004548:	e7e9      	b.n	800451e <__udivmoddi4+0x27e>
 800454a:	4618      	mov	r0, r3
 800454c:	e795      	b.n	800447a <__udivmoddi4+0x1da>
 800454e:	4667      	mov	r7, ip
 8004550:	e7d1      	b.n	80044f6 <__udivmoddi4+0x256>
 8004552:	4681      	mov	r9, r0
 8004554:	e77c      	b.n	8004450 <__udivmoddi4+0x1b0>
 8004556:	3802      	subs	r0, #2
 8004558:	442c      	add	r4, r5
 800455a:	e747      	b.n	80043ec <__udivmoddi4+0x14c>
 800455c:	f1ac 0c02 	sub.w	ip, ip, #2
 8004560:	442b      	add	r3, r5
 8004562:	e72f      	b.n	80043c4 <__udivmoddi4+0x124>
 8004564:	4638      	mov	r0, r7
 8004566:	e708      	b.n	800437a <__udivmoddi4+0xda>
 8004568:	4637      	mov	r7, r6
 800456a:	e6e9      	b.n	8004340 <__udivmoddi4+0xa0>

0800456c <__aeabi_idiv0>:
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <EraseApplicationMemory>:
extern Buffer_t UART_Buffer;
extern Buffer_t FLash_UART_read_buffer;
//extern UART_HandleTypeDef huart3;

void EraseApplicationMemory(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
	/*Erase the sector where the HEX data is to be stored*/
	EraseFlashSector((uint32_t)HEXFILE_FLASHSECTOR);
 8004574:	2006      	movs	r0, #6
 8004576:	f000 f80c 	bl	8004592 <EraseFlashSector>
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}

0800457e <putMessages>:
{
	FlashRead(HEXFILE_FLASHADDRESS, FLash_UART_read_buffer.UART_Rx_Word_buffer, BLE_DATA_RX_IN_WORDS);
}

void putMessages(uint8_t *pData)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
		temp += 1;
	}
	//print the string
	HAL_UART_Transmit(&huart3, pData, len, 1000);
#endif
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <EraseFlashSector>:

#include "FLash.h"
#include "string.h"

void EraseFlashSector(uint32_t Sector)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
	//unlock the flash action
	HAL_FLASH_Unlock();
 800459a:	f000 fd9d 	bl	80050d8 <HAL_FLASH_Unlock>
	/*		FLASH ERASE			*/
	FLASH_Erase_Sector(Sector,FLASH_VOLTAGE_RANGE_3);
 800459e:	2102      	movs	r1, #2
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fef9 	bl	8005398 <FLASH_Erase_Sector>
	//Lock the flash action
	HAL_FLASH_Lock();
 80045a6:	f000 fdb9 	bl	800511c <HAL_FLASH_Lock>

}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <WriteDATAintoFlash>:


}

void WriteDATAintoFlash(uint32_t Address,uint8_t* pData,uint32_t wordLength)
{
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
	//Local variables
	uint32_t index = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
	//unlock the flash action
	HAL_FLASH_Unlock();
 80045c4:	f000 fd88 	bl	80050d8 <HAL_FLASH_Unlock>
	/*		DATA WRITE			*/
	while(index < wordLength)
 80045c8:	e019      	b.n	80045fe <WriteDATAintoFlash+0x4a>
	{
#if 0
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, Address, pData[index]) == HAL_OK)
#else
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, Address, pData[index]) == HAL_OK)
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	4413      	add	r3, r2
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	461a      	mov	r2, r3
 80045da:	4623      	mov	r3, r4
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	2000      	movs	r0, #0
 80045e0:	f000 fd26 	bl	8005030 <HAL_FLASH_Program>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <WriteDATAintoFlash+0x44>
#if 0
			//Increment the flash address by 4bytes for 32 bits of data is being stored
			Address += 4;
#else
			//Increment the flash address by 1bytes for 8 bits of data is being stored
			Address += 1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3301      	adds	r3, #1
 80045ee:	60fb      	str	r3, [r7, #12]
#endif
			//Increment the index by one as the data buffer is of 32 bits
			index += 1;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	3301      	adds	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e002      	b.n	80045fe <WriteDATAintoFlash+0x4a>
		}
		else{
			putMessages((uint8_t*)"Error in flash writing\n\r");
 80045f8:	4806      	ldr	r0, [pc, #24]	; (8004614 <WriteDATAintoFlash+0x60>)
 80045fa:	f7ff ffc0 	bl	800457e <putMessages>
	while(index < wordLength)
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	429a      	cmp	r2, r3
 8004604:	d3e1      	bcc.n	80045ca <WriteDATAintoFlash+0x16>
		}
	}
	/**********************************/
	//Lock the flash action
	HAL_FLASH_Lock();
 8004606:	f000 fd89 	bl	800511c <HAL_FLASH_Lock>
}
 800460a:	bf00      	nop
 800460c:	371c      	adds	r7, #28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd90      	pop	{r4, r7, pc}
 8004612:	bf00      	nop
 8004614:	080075f0 	.word	0x080075f0

08004618 <go2App>:
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}
#endif

void go2App(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
	uint32_t JumpAddress;
	pFunction Jump_To_Application;

	if(((*(uint32_t*)HEXFILE_FLASHADDRESS) & 0x2ffe0000) == 0x20020000)
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <go2App+0x3c>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <go2App+0x40>)
 8004624:	4013      	ands	r3, r2
 8004626:	4a0d      	ldr	r2, [pc, #52]	; (800465c <go2App+0x44>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d10f      	bne.n	800464c <go2App+0x34>
	{
		//App start
		JumpAddress = *(uint32_t*) (HEXFILE_FLASHADDRESS + 4);//Jumping address to the reset handler
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <go2App+0x48>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
		Jump_To_Application = (pFunction)JumpAddress;//Function pointer to reset handler
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	60bb      	str	r3, [r7, #8]
		//Data received from UART
		putMessages((uint8_t*)"Jumping to application\n\r");
 8004636:	480b      	ldr	r0, [pc, #44]	; (8004664 <go2App+0x4c>)
 8004638:	f7ff ffa1 	bl	800457e <putMessages>
		HAL_DeInit();
		SysTick->CTRL = 0;
		SysTick->LOAD = 0;
		SysTick->VAL = 0;
#endif
		__set_MSP(*(uint32_t*)HEXFILE_FLASHADDRESS);//set the Main Stack Pointer to the start of the Application Flash memory location
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <go2App+0x3c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f383 8808 	msr	MSP, r3
		//jump to the application
		Jump_To_Application();//Execute the Application program
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4798      	blx	r3

	}
	else{
		//Application code not present
	}
}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	08040000 	.word	0x08040000
 8004658:	2ffe0000 	.word	0x2ffe0000
 800465c:	20020000 	.word	0x20020000
 8004660:	08040004 	.word	0x08040004
 8004664:	0800760c 	.word	0x0800760c

08004668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800466e:	f000 fb21 	bl	8004cb4 <HAL_Init>

  /* USER CODE BEGIN Init */
  go2App();
 8004672:	f7ff ffd1 	bl	8004618 <go2App>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004676:	f000 f879 	bl	800476c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800467a:	f000 f8ff 	bl	800487c <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800467e:	f000 f8d3 	bl	8004828 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Start data on UART interrupt
  putMessages((uint8_t*)"=============================Booting============================\n\r");
 8004682:	4829      	ldr	r0, [pc, #164]	; (8004728 <main+0xc0>)
 8004684:	f7ff ff7b 	bl	800457e <putMessages>
  sprintf((char*)msg_buffer,"Firmware version : %d.%d.%d\n\rModification date : %d/%d/%d\n\r",MAJOR_VER,MINOR_VER,BUG_FIX,DD,MM,YY);
 8004688:	2316      	movs	r3, #22
 800468a:	9303      	str	r3, [sp, #12]
 800468c:	230c      	movs	r3, #12
 800468e:	9302      	str	r3, [sp, #8]
 8004690:	2317      	movs	r3, #23
 8004692:	9301      	str	r3, [sp, #4]
 8004694:	2300      	movs	r3, #0
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	2303      	movs	r3, #3
 800469a:	2201      	movs	r2, #1
 800469c:	4923      	ldr	r1, [pc, #140]	; (800472c <main+0xc4>)
 800469e:	4824      	ldr	r0, [pc, #144]	; (8004730 <main+0xc8>)
 80046a0:	f002 fb94 	bl	8006dcc <siprintf>
  putMessages((uint8_t*)msg_buffer);
 80046a4:	4822      	ldr	r0, [pc, #136]	; (8004730 <main+0xc8>)
 80046a6:	f7ff ff6a 	bl	800457e <putMessages>
  putMessages((uint8_t*)"Bootloader initialized\n\r");
 80046aa:	4822      	ldr	r0, [pc, #136]	; (8004734 <main+0xcc>)
 80046ac:	f7ff ff67 	bl	800457e <putMessages>
  putMessages((uint8_t*)"Erasing flash...\n\r");
 80046b0:	4821      	ldr	r0, [pc, #132]	; (8004738 <main+0xd0>)
 80046b2:	f7ff ff64 	bl	800457e <putMessages>
  EraseApplicationMemory();
 80046b6:	f7ff ff5b 	bl	8004570 <EraseApplicationMemory>
  putMessages((uint8_t*)"Flash erased!!!\n\r");
 80046ba:	4820      	ldr	r0, [pc, #128]	; (800473c <main+0xd4>)
 80046bc:	f7ff ff5f 	bl	800457e <putMessages>
#if 0
  HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, (uint16_t)5);
#else
  HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, (uint16_t)4);
 80046c0:	2204      	movs	r2, #4
 80046c2:	491f      	ldr	r1, [pc, #124]	; (8004740 <main+0xd8>)
 80046c4:	481f      	ldr	r0, [pc, #124]	; (8004744 <main+0xdc>)
 80046c6:	f001 fcd2 	bl	800606e <HAL_UART_Receive_IT>
#endif
  putMessages((uint8_t*)"BLE UART initiated!!\n\r");
 80046ca:	481f      	ldr	r0, [pc, #124]	; (8004748 <main+0xe0>)
 80046cc:	f7ff ff57 	bl	800457e <putMessages>
  putMessages((uint8_t*)"Started UART Rx interrupt\n\r");
 80046d0:	481e      	ldr	r0, [pc, #120]	; (800474c <main+0xe4>)
 80046d2:	f7ff ff54 	bl	800457e <putMessages>
#else
		  HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, UART2_RX_LENGTH_IN_BYTES);
#endif
	  }
#else
	  if(UART_Rx_Complete)
 80046d6:	4b1e      	ldr	r3, [pc, #120]	; (8004750 <main+0xe8>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0fb      	beq.n	80046d6 <main+0x6e>
	  {
		//RESET Flag
		UART_Rx_Complete = RESET;
 80046de:	4b1c      	ldr	r3, [pc, #112]	; (8004750 <main+0xe8>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]

		//Data received from UART
		//putMessages((uint8_t*)"Received data from UART\n\r");
		live_data_row += 1;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <main+0xec>)
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	3301      	adds	r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	4b19      	ldr	r3, [pc, #100]	; (8004754 <main+0xec>)
 80046ee:	801a      	strh	r2, [r3, #0]
		//Write data into FLASH
		WriteDATAintoFlash(FLASHStartingAddress, UART_Buffer.UART_Rx_buffer, data_bytes);
 80046f0:	4b19      	ldr	r3, [pc, #100]	; (8004758 <main+0xf0>)
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	4b19      	ldr	r3, [pc, #100]	; (800475c <main+0xf4>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4911      	ldr	r1, [pc, #68]	; (8004740 <main+0xd8>)
 80046fc:	f7ff ff5a 	bl	80045b4 <WriteDATAintoFlash>
		if(recv_packet_counter >= no_of_rows - 1)//410-1)
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <main+0xf8>)
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	4b17      	ldr	r3, [pc, #92]	; (8004764 <main+0xfc>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3b01      	subs	r3, #1
 800470c:	429a      	cmp	r2, r3
 800470e:	d305      	bcc.n	800471c <main+0xb4>
		{
			//Data received from UART
			putMessages((uint8_t*)"Jumping to application\n\r");
 8004710:	4815      	ldr	r0, [pc, #84]	; (8004768 <main+0x100>)
 8004712:	f7ff ff34 	bl	800457e <putMessages>
			//Jump to the aplication
//			go2App();
			HAL_NVIC_SystemReset();
 8004716:	f000 fc58 	bl	8004fca <HAL_NVIC_SystemReset>
 800471a:	e7dc      	b.n	80046d6 <main+0x6e>
		}else
			//reset the UART for 5 no of bytes
			HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, (uint16_t)5);
 800471c:	2205      	movs	r2, #5
 800471e:	4908      	ldr	r1, [pc, #32]	; (8004740 <main+0xd8>)
 8004720:	4808      	ldr	r0, [pc, #32]	; (8004744 <main+0xdc>)
 8004722:	f001 fca4 	bl	800606e <HAL_UART_Receive_IT>
	  if(UART_Rx_Complete)
 8004726:	e7d6      	b.n	80046d6 <main+0x6e>
 8004728:	08007628 	.word	0x08007628
 800472c:	0800766c 	.word	0x0800766c
 8004730:	200000ac 	.word	0x200000ac
 8004734:	080076a8 	.word	0x080076a8
 8004738:	080076c4 	.word	0x080076c4
 800473c:	080076d8 	.word	0x080076d8
 8004740:	20000378 	.word	0x20000378
 8004744:	20000578 	.word	0x20000578
 8004748:	080076ec 	.word	0x080076ec
 800474c:	08007704 	.word	0x08007704
 8004750:	200000aa 	.word	0x200000aa
 8004754:	20000094 	.word	0x20000094
 8004758:	200005bc 	.word	0x200005bc
 800475c:	200005ba 	.word	0x200005ba
 8004760:	200005b8 	.word	0x200005b8
 8004764:	20000090 	.word	0x20000090
 8004768:	0800760c 	.word	0x0800760c

0800476c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b094      	sub	sp, #80	; 0x50
 8004770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004772:	f107 0320 	add.w	r3, r7, #32
 8004776:	2230      	movs	r2, #48	; 0x30
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f002 fb1e 	bl	8006dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004780:	f107 030c 	add.w	r3, r7, #12
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	60da      	str	r2, [r3, #12]
 800478e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004790:	2300      	movs	r3, #0
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	4b22      	ldr	r3, [pc, #136]	; (8004820 <SystemClock_Config+0xb4>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	4a21      	ldr	r2, [pc, #132]	; (8004820 <SystemClock_Config+0xb4>)
 800479a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479e:	6413      	str	r3, [r2, #64]	; 0x40
 80047a0:	4b1f      	ldr	r3, [pc, #124]	; (8004820 <SystemClock_Config+0xb4>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047ac:	2300      	movs	r3, #0
 80047ae:	607b      	str	r3, [r7, #4]
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <SystemClock_Config+0xb8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <SystemClock_Config+0xb8>)
 80047b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <SystemClock_Config+0xb8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047c4:	607b      	str	r3, [r7, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047c8:	2302      	movs	r3, #2
 80047ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047cc:	2301      	movs	r3, #1
 80047ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047d0:	2310      	movs	r3, #16
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047d8:	f107 0320 	add.w	r3, r7, #32
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 ffbd 	bl	800575c <HAL_RCC_OscConfig>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80047e8:	f000 f870 	bl	80048cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047ec:	230f      	movs	r3, #15
 80047ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f001 fa18 	bl	8005c3c <HAL_RCC_ClockConfig>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004812:	f000 f85b 	bl	80048cc <Error_Handler>
  }
}
 8004816:	bf00      	nop
 8004818:	3750      	adds	r7, #80	; 0x50
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	40007000 	.word	0x40007000

08004828 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 800482e:	4a12      	ldr	r2, [pc, #72]	; (8004878 <MX_USART6_UART_Init+0x50>)
 8004830:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 8004834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004838:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 800483c:	2200      	movs	r2, #0
 800483e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 8004842:	2200      	movs	r2, #0
 8004844:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 8004848:	2200      	movs	r2, #0
 800484a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 800484e:	220c      	movs	r2, #12
 8004850:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 8004854:	2200      	movs	r2, #0
 8004856:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 800485a:	2200      	movs	r2, #0
 800485c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800485e:	4805      	ldr	r0, [pc, #20]	; (8004874 <MX_USART6_UART_Init+0x4c>)
 8004860:	f001 fbb8 	bl	8005fd4 <HAL_UART_Init>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800486a:	f000 f82f 	bl	80048cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	20000578 	.word	0x20000578
 8004878:	40011400 	.word	0x40011400

0800487c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <MX_GPIO_Init+0x4c>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <MX_GPIO_Init+0x4c>)
 800488c:	f043 0304 	orr.w	r3, r3, #4
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <MX_GPIO_Init+0x4c>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800489e:	2300      	movs	r3, #0
 80048a0:	603b      	str	r3, [r7, #0]
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <MX_GPIO_Init+0x4c>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a08      	ldr	r2, [pc, #32]	; (80048c8 <MX_GPIO_Init+0x4c>)
 80048a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ac:	6313      	str	r3, [r2, #48]	; 0x30
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <MX_GPIO_Init+0x4c>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	603b      	str	r3, [r7, #0]
 80048b8:	683b      	ldr	r3, [r7, #0]

}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800

080048cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048d0:	bf00      	nop
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_MspInit+0x4c>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a0f      	ldr	r2, [pc, #60]	; (8004928 <HAL_MspInit+0x4c>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_MspInit+0x4c>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	603b      	str	r3, [r7, #0]
 8004902:	4b09      	ldr	r3, [pc, #36]	; (8004928 <HAL_MspInit+0x4c>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4a08      	ldr	r2, [pc, #32]	; (8004928 <HAL_MspInit+0x4c>)
 8004908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b06      	ldr	r3, [pc, #24]	; (8004928 <HAL_MspInit+0x4c>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800

0800492c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	609a      	str	r2, [r3, #8]
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <HAL_UART_MspInit+0xd0>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d152      	bne.n	80049f4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800494e:	2300      	movs	r3, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	4a2a      	ldr	r2, [pc, #168]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004958:	f043 0320 	orr.w	r3, r3, #32
 800495c:	6453      	str	r3, [r2, #68]	; 0x44
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	613b      	str	r3, [r7, #16]
 8004968:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004972:	4a23      	ldr	r2, [pc, #140]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	6313      	str	r3, [r2, #48]	; 0x30
 800497a:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	60bb      	str	r3, [r7, #8]
 800498a:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004994:	6313      	str	r3, [r2, #48]	; 0x30
 8004996:	4b1a      	ldr	r3, [pc, #104]	; (8004a00 <HAL_UART_MspInit+0xd4>)
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	60bb      	str	r3, [r7, #8]
 80049a0:	68bb      	ldr	r3, [r7, #8]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PG9     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80049a2:	2340      	movs	r3, #64	; 0x40
 80049a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a6:	2302      	movs	r3, #2
 80049a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049aa:	2301      	movs	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ae:	2303      	movs	r3, #3
 80049b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049b2:	2308      	movs	r3, #8
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b6:	f107 0314 	add.w	r3, r7, #20
 80049ba:	4619      	mov	r1, r3
 80049bc:	4811      	ldr	r0, [pc, #68]	; (8004a04 <HAL_UART_MspInit+0xd8>)
 80049be:	f000 fd33 	bl	8005428 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80049c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c8:	2302      	movs	r3, #2
 80049ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049cc:	2301      	movs	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d0:	2303      	movs	r3, #3
 80049d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80049d4:	2308      	movs	r3, #8
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	4619      	mov	r1, r3
 80049de:	480a      	ldr	r0, [pc, #40]	; (8004a08 <HAL_UART_MspInit+0xdc>)
 80049e0:	f000 fd22 	bl	8005428 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80049e4:	2200      	movs	r2, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	2047      	movs	r0, #71	; 0x47
 80049ea:	f000 fac4 	bl	8004f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80049ee:	2047      	movs	r0, #71	; 0x47
 80049f0:	f000 fadd 	bl	8004fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80049f4:	bf00      	nop
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40011400 	.word	0x40011400
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40020800 	.word	0x40020800
 8004a08:	40021800 	.word	0x40021800

08004a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a1e:	e7fe      	b.n	8004a1e <HardFault_Handler+0x4>

08004a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a24:	e7fe      	b.n	8004a24 <MemManage_Handler+0x4>

08004a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a2a:	e7fe      	b.n	8004a2a <BusFault_Handler+0x4>

08004a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <UsageFault_Handler+0x4>

08004a32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a36:	bf00      	nop
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a44:	bf00      	nop
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a60:	f000 f97a 	bl	8004d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a64:	bf00      	nop
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USART6_IRQHandler>:
#endif
/**
  * @brief This function handles USART2 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004a6c:	4802      	ldr	r0, [pc, #8]	; (8004a78 <USART6_IRQHandler+0x10>)
 8004a6e:	f001 fbab 	bl	80061c8 <HAL_UART_IRQHandler>
//	  Rx_Counter = 0;
//  	  UART_Rx_Complete = SET;//Will be RESET after calculating CRC and matching
//  }

  /* USER CODE END USART2_IRQn 1 */
}
 8004a72:	bf00      	nop
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	20000578 	.word	0x20000578

08004a7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	if(huart == &huart6)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a4b      	ldr	r2, [pc, #300]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	f040 808e 	bne.w	8004baa <HAL_UART_RxCpltCallback+0x12e>
	{
		//UART_Rx_Complete = SET;
		//Abort UART 2 Rx
		//HAL_UART_Abort_IT(&huart6);

		HAL_UART_AbortReceive_IT(&huart6);
 8004a8e:	4849      	ldr	r0, [pc, #292]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004a90:	f001 fb42 	bl	8006118 <HAL_UART_AbortReceive_IT>
//		recv_packet_counter += 1;
		if(file_info_flag < 3)
 8004a94:	4b48      	ldr	r3, [pc, #288]	; (8004bb8 <HAL_UART_RxCpltCallback+0x13c>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d805      	bhi.n	8004aa8 <HAL_UART_RxCpltCallback+0x2c>
			file_info_flag += 1;
 8004a9c:	4b46      	ldr	r3, [pc, #280]	; (8004bb8 <HAL_UART_RxCpltCallback+0x13c>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	4b44      	ldr	r3, [pc, #272]	; (8004bb8 <HAL_UART_RxCpltCallback+0x13c>)
 8004aa6:	701a      	strb	r2, [r3, #0]
		if(file_info_flag > 2)
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <HAL_UART_RxCpltCallback+0x13c>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d93e      	bls.n	8004b2e <HAL_UART_RxCpltCallback+0xb2>
		{
			data_frame += 1;
 8004ab0:	4b42      	ldr	r3, [pc, #264]	; (8004bbc <HAL_UART_RxCpltCallback+0x140>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	4b40      	ldr	r3, [pc, #256]	; (8004bbc <HAL_UART_RxCpltCallback+0x140>)
 8004aba:	701a      	strb	r2, [r3, #0]
			switch(data_frame)
 8004abc:	4b3f      	ldr	r3, [pc, #252]	; (8004bbc <HAL_UART_RxCpltCallback+0x140>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d002      	beq.n	8004aca <HAL_UART_RxCpltCallback+0x4e>
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d021      	beq.n	8004b0c <HAL_UART_RxCpltCallback+0x90>
			}
		}


	}
}
 8004ac8:	e070      	b.n	8004bac <HAL_UART_RxCpltCallback+0x130>
				HAL_UART_AbortReceive_IT(&huart6);
 8004aca:	483a      	ldr	r0, [pc, #232]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004acc:	f001 fb24 	bl	8006118 <HAL_UART_AbortReceive_IT>
				FLASHStartingAddress = (UART_Buffer.UART_Rx_buffer[0]<<24)
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	061a      	lsls	r2, r3, #24
						|(UART_Buffer.UART_Rx_buffer[1]<<16)
 8004ad6:	4b3a      	ldr	r3, [pc, #232]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004ad8:	785b      	ldrb	r3, [r3, #1]
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	431a      	orrs	r2, r3
						|(UART_Buffer.UART_Rx_buffer[2]<<8)
 8004ade:	4b38      	ldr	r3, [pc, #224]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004ae0:	789b      	ldrb	r3, [r3, #2]
 8004ae2:	021b      	lsls	r3, r3, #8
 8004ae4:	4313      	orrs	r3, r2
						|(UART_Buffer.UART_Rx_buffer[3]);
 8004ae6:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004ae8:	78d2      	ldrb	r2, [r2, #3]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	461a      	mov	r2, r3
				FLASHStartingAddress = (UART_Buffer.UART_Rx_buffer[0]<<24)
 8004aee:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <HAL_UART_RxCpltCallback+0x148>)
 8004af0:	601a      	str	r2, [r3, #0]
				data_bytes = UART_Buffer.UART_Rx_buffer[4];
 8004af2:	4b33      	ldr	r3, [pc, #204]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004af4:	791a      	ldrb	r2, [r3, #4]
 8004af6:	4b34      	ldr	r3, [pc, #208]	; (8004bc8 <HAL_UART_RxCpltCallback+0x14c>)
 8004af8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, (uint16_t)data_bytes);
 8004afa:	4b33      	ldr	r3, [pc, #204]	; (8004bc8 <HAL_UART_RxCpltCallback+0x14c>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	492f      	ldr	r1, [pc, #188]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b04:	482b      	ldr	r0, [pc, #172]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004b06:	f001 fab2 	bl	800606e <HAL_UART_Receive_IT>
				break;
 8004b0a:	e04f      	b.n	8004bac <HAL_UART_RxCpltCallback+0x130>
				data_frame = 0;
 8004b0c:	4b2b      	ldr	r3, [pc, #172]	; (8004bbc <HAL_UART_RxCpltCallback+0x140>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	701a      	strb	r2, [r3, #0]
				HAL_UART_AbortReceive_IT(&huart6);
 8004b12:	4828      	ldr	r0, [pc, #160]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004b14:	f001 fb00 	bl	8006118 <HAL_UART_AbortReceive_IT>
				UART_Rx_Complete = SET;
 8004b18:	4b2c      	ldr	r3, [pc, #176]	; (8004bcc <HAL_UART_RxCpltCallback+0x150>)
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	701a      	strb	r2, [r3, #0]
				recv_packet_counter += 1;
 8004b1e:	4b2c      	ldr	r3, [pc, #176]	; (8004bd0 <HAL_UART_RxCpltCallback+0x154>)
 8004b20:	881b      	ldrh	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	4b2a      	ldr	r3, [pc, #168]	; (8004bd0 <HAL_UART_RxCpltCallback+0x154>)
 8004b28:	801a      	strh	r2, [r3, #0]
				break;
 8004b2a:	bf00      	nop
 8004b2c:	e03e      	b.n	8004bac <HAL_UART_RxCpltCallback+0x130>
			switch(file_info_flag)
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_UART_RxCpltCallback+0x13c>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_RxCpltCallback+0xc0>
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d01a      	beq.n	8004b70 <HAL_UART_RxCpltCallback+0xf4>
				break;
 8004b3a:	e037      	b.n	8004bac <HAL_UART_RxCpltCallback+0x130>
				HAL_UART_AbortReceive_IT(&huart6);
 8004b3c:	481d      	ldr	r0, [pc, #116]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004b3e:	f001 faeb 	bl	8006118 <HAL_UART_AbortReceive_IT>
				no_of_rows = (UART_Buffer.UART_Rx_buffer[0]<<24)
 8004b42:	4b1f      	ldr	r3, [pc, #124]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	061a      	lsls	r2, r3, #24
						|(UART_Buffer.UART_Rx_buffer[1]<<16)
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	431a      	orrs	r2, r3
						|(UART_Buffer.UART_Rx_buffer[2]<<8)
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b52:	789b      	ldrb	r3, [r3, #2]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	4313      	orrs	r3, r2
						|(UART_Buffer.UART_Rx_buffer[3]);
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b5a:	78d2      	ldrb	r2, [r2, #3]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	461a      	mov	r2, r3
				no_of_rows = (UART_Buffer.UART_Rx_buffer[0]<<24)
 8004b60:	4b1c      	ldr	r3, [pc, #112]	; (8004bd4 <HAL_UART_RxCpltCallback+0x158>)
 8004b62:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, 4);
 8004b64:	2204      	movs	r2, #4
 8004b66:	4916      	ldr	r1, [pc, #88]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b68:	4812      	ldr	r0, [pc, #72]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004b6a:	f001 fa80 	bl	800606e <HAL_UART_Receive_IT>
				break;
 8004b6e:	e01d      	b.n	8004bac <HAL_UART_RxCpltCallback+0x130>
				HAL_UART_AbortReceive_IT(&huart6);
 8004b70:	4810      	ldr	r0, [pc, #64]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004b72:	f001 fad1 	bl	8006118 <HAL_UART_AbortReceive_IT>
				file_size_in_bytes = (UART_Buffer.UART_Rx_buffer[0]<<24)
 8004b76:	4b12      	ldr	r3, [pc, #72]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	061a      	lsls	r2, r3, #24
						|(UART_Buffer.UART_Rx_buffer[1]<<16)
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	431a      	orrs	r2, r3
						|(UART_Buffer.UART_Rx_buffer[2]<<8)
 8004b84:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b86:	789b      	ldrb	r3, [r3, #2]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	4313      	orrs	r3, r2
						|(UART_Buffer.UART_Rx_buffer[3]);
 8004b8c:	4a0c      	ldr	r2, [pc, #48]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b8e:	78d2      	ldrb	r2, [r2, #3]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	461a      	mov	r2, r3
				file_size_in_bytes = (UART_Buffer.UART_Rx_buffer[0]<<24)
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_UART_RxCpltCallback+0x15c>)
 8004b96:	601a      	str	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6, UART_Buffer.UART_Rx_buffer, 5);
 8004b98:	2205      	movs	r2, #5
 8004b9a:	4909      	ldr	r1, [pc, #36]	; (8004bc0 <HAL_UART_RxCpltCallback+0x144>)
 8004b9c:	4805      	ldr	r0, [pc, #20]	; (8004bb4 <HAL_UART_RxCpltCallback+0x138>)
 8004b9e:	f001 fa66 	bl	800606e <HAL_UART_Receive_IT>
				file_info_flag = 3;
 8004ba2:	4b05      	ldr	r3, [pc, #20]	; (8004bb8 <HAL_UART_RxCpltCallback+0x13c>)
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	701a      	strb	r2, [r3, #0]
				break;
 8004ba8:	e000      	b.n	8004bac <HAL_UART_RxCpltCallback+0x130>
		}
 8004baa:	bf00      	nop
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000578 	.word	0x20000578
 8004bb8:	2000008c 	.word	0x2000008c
 8004bbc:	20000624 	.word	0x20000624
 8004bc0:	20000378 	.word	0x20000378
 8004bc4:	200005bc 	.word	0x200005bc
 8004bc8:	200005ba 	.word	0x200005ba
 8004bcc:	200000aa 	.word	0x200000aa
 8004bd0:	200005b8 	.word	0x200005b8
 8004bd4:	20000090 	.word	0x20000090
 8004bd8:	20000098 	.word	0x20000098

08004bdc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004be4:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <_sbrk+0x50>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <_sbrk+0x16>
		heap_end = &end;
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <_sbrk+0x50>)
 8004bee:	4a10      	ldr	r2, [pc, #64]	; (8004c30 <_sbrk+0x54>)
 8004bf0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <_sbrk+0x50>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <_sbrk+0x50>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	466a      	mov	r2, sp
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d907      	bls.n	8004c16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004c06:	f002 f8af 	bl	8006d68 <__errno>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	230c      	movs	r3, #12
 8004c0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c14:	e006      	b.n	8004c24 <_sbrk+0x48>
	}

	heap_end += incr;
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <_sbrk+0x50>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	4a03      	ldr	r2, [pc, #12]	; (8004c2c <_sbrk+0x50>)
 8004c20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	2000009c 	.word	0x2000009c
 8004c30:	20000650 	.word	0x20000650

08004c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c38:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <SystemInit+0x28>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	4a07      	ldr	r2, [pc, #28]	; (8004c5c <SystemInit+0x28>)
 8004c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <SystemInit+0x28>)
 8004c4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c4e:	609a      	str	r2, [r3, #8]
#endif
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c98 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c66:	e003      	b.n	8004c70 <LoopCopyDataInit>

08004c68 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c68:	4b0c      	ldr	r3, [pc, #48]	; (8004c9c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c6e:	3104      	adds	r1, #4

08004c70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c70:	480b      	ldr	r0, [pc, #44]	; (8004ca0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c78:	d3f6      	bcc.n	8004c68 <CopyDataInit>
  ldr  r2, =_sbss
 8004c7a:	4a0b      	ldr	r2, [pc, #44]	; (8004ca8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c7c:	e002      	b.n	8004c84 <LoopFillZerobss>

08004c7e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c80:	f842 3b04 	str.w	r3, [r2], #4

08004c84 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c84:	4b09      	ldr	r3, [pc, #36]	; (8004cac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c86:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c88:	d3f9      	bcc.n	8004c7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c8a:	f7ff ffd3 	bl	8004c34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c8e:	f002 f871 	bl	8006d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c92:	f7ff fce9 	bl	8004668 <main>
  bx  lr    
 8004c96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c98:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c9c:	0800777c 	.word	0x0800777c
  ldr  r0, =_sdata
 8004ca0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ca4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004ca8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004cac:	20000650 	.word	0x20000650

08004cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cb0:	e7fe      	b.n	8004cb0 <ADC_IRQHandler>
	...

08004cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_Init+0x40>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <HAL_Init+0x40>)
 8004cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_Init+0x40>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	; (8004cf4 <HAL_Init+0x40>)
 8004cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <HAL_Init+0x40>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <HAL_Init+0x40>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cdc:	2003      	movs	r0, #3
 8004cde:	f000 f93f 	bl	8004f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	f000 f808 	bl	8004cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ce8:	f7ff fdf8 	bl	80048dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40023c00 	.word	0x40023c00

08004cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d00:	4b12      	ldr	r3, [pc, #72]	; (8004d4c <HAL_InitTick+0x54>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <HAL_InitTick+0x58>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f95b 	bl	8004fd2 <HAL_SYSTICK_Config>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e00e      	b.n	8004d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d80a      	bhi.n	8004d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d34:	f000 f91f 	bl	8004f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d38:	4a06      	ldr	r2, [pc, #24]	; (8004d54 <HAL_InitTick+0x5c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e000      	b.n	8004d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	20000000 	.word	0x20000000
 8004d50:	20000008 	.word	0x20000008
 8004d54:	20000004 	.word	0x20000004

08004d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <HAL_IncTick+0x20>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	461a      	mov	r2, r3
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_IncTick+0x24>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4413      	add	r3, r2
 8004d68:	4a04      	ldr	r2, [pc, #16]	; (8004d7c <HAL_IncTick+0x24>)
 8004d6a:	6013      	str	r3, [r2, #0]
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	20000008 	.word	0x20000008
 8004d7c:	20000628 	.word	0x20000628

08004d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return uwTick;
 8004d84:	4b03      	ldr	r3, [pc, #12]	; (8004d94 <HAL_GetTick+0x14>)
 8004d86:	681b      	ldr	r3, [r3, #0]
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop
 8004d94:	20000628 	.word	0x20000628

08004d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da8:	4b0c      	ldr	r3, [pc, #48]	; (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004db4:	4013      	ands	r3, r2
 8004db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dca:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <__NVIC_SetPriorityGrouping+0x44>)
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	60d3      	str	r3, [r2, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de4:	4b04      	ldr	r3, [pc, #16]	; (8004df8 <__NVIC_GetPriorityGrouping+0x18>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	0a1b      	lsrs	r3, r3, #8
 8004dea:	f003 0307 	and.w	r3, r3, #7
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	e000ed00 	.word	0xe000ed00

08004dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	4603      	mov	r3, r0
 8004e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	db0b      	blt.n	8004e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0e:	79fb      	ldrb	r3, [r7, #7]
 8004e10:	f003 021f 	and.w	r2, r3, #31
 8004e14:	4907      	ldr	r1, [pc, #28]	; (8004e34 <__NVIC_EnableIRQ+0x38>)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	e000e100 	.word	0xe000e100

08004e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	4603      	mov	r3, r0
 8004e40:	6039      	str	r1, [r7, #0]
 8004e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	db0a      	blt.n	8004e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	490c      	ldr	r1, [pc, #48]	; (8004e84 <__NVIC_SetPriority+0x4c>)
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	0112      	lsls	r2, r2, #4
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e60:	e00a      	b.n	8004e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	4908      	ldr	r1, [pc, #32]	; (8004e88 <__NVIC_SetPriority+0x50>)
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	f003 030f 	and.w	r3, r3, #15
 8004e6e:	3b04      	subs	r3, #4
 8004e70:	0112      	lsls	r2, r2, #4
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	440b      	add	r3, r1
 8004e76:	761a      	strb	r2, [r3, #24]
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	e000e100 	.word	0xe000e100
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b089      	sub	sp, #36	; 0x24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	f1c3 0307 	rsb	r3, r3, #7
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	bf28      	it	cs
 8004eaa:	2304      	movcs	r3, #4
 8004eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	2b06      	cmp	r3, #6
 8004eb4:	d902      	bls.n	8004ebc <NVIC_EncodePriority+0x30>
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	3b03      	subs	r3, #3
 8004eba:	e000      	b.n	8004ebe <NVIC_EncodePriority+0x32>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43da      	mvns	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	401a      	ands	r2, r3
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	43d9      	mvns	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee4:	4313      	orrs	r3, r2
         );
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3724      	adds	r7, #36	; 0x24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004ef8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004efc:	4b05      	ldr	r3, [pc, #20]	; (8004f14 <__NVIC_SystemReset+0x20>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004f04:	4903      	ldr	r1, [pc, #12]	; (8004f14 <__NVIC_SystemReset+0x20>)
 8004f06:	4b04      	ldr	r3, [pc, #16]	; (8004f18 <__NVIC_SystemReset+0x24>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60cb      	str	r3, [r1, #12]
 8004f0c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004f10:	bf00      	nop
 8004f12:	e7fd      	b.n	8004f10 <__NVIC_SystemReset+0x1c>
 8004f14:	e000ed00 	.word	0xe000ed00
 8004f18:	05fa0004 	.word	0x05fa0004

08004f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f2c:	d301      	bcc.n	8004f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00f      	b.n	8004f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <SysTick_Config+0x40>)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f3a:	210f      	movs	r1, #15
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f40:	f7ff ff7a 	bl	8004e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <SysTick_Config+0x40>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f4a:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <SysTick_Config+0x40>)
 8004f4c:	2207      	movs	r2, #7
 8004f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	e000e010 	.word	0xe000e010

08004f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff ff15 	bl	8004d98 <__NVIC_SetPriorityGrouping>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b086      	sub	sp, #24
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f88:	f7ff ff2a 	bl	8004de0 <__NVIC_GetPriorityGrouping>
 8004f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	6978      	ldr	r0, [r7, #20]
 8004f94:	f7ff ff7a 	bl	8004e8c <NVIC_EncodePriority>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7ff ff49 	bl	8004e38 <__NVIC_SetPriority>
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff ff1d 	bl	8004dfc <__NVIC_EnableIRQ>
}
 8004fc2:	bf00      	nop
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004fce:	f7ff ff91 	bl	8004ef4 <__NVIC_SystemReset>

08004fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b082      	sub	sp, #8
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ff9e 	bl	8004f1c <SysTick_Config>
 8004fe0:	4603      	mov	r3, r0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d004      	beq.n	8005008 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2280      	movs	r2, #128	; 0x80
 8005002:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e00c      	b.n	8005022 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2205      	movs	r2, #5
 800500c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0201 	bic.w	r2, r2, #1
 800501e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005042:	4b23      	ldr	r3, [pc, #140]	; (80050d0 <HAL_FLASH_Program+0xa0>)
 8005044:	7e1b      	ldrb	r3, [r3, #24]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_FLASH_Program+0x1e>
 800504a:	2302      	movs	r3, #2
 800504c:	e03b      	b.n	80050c6 <HAL_FLASH_Program+0x96>
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <HAL_FLASH_Program+0xa0>)
 8005050:	2201      	movs	r2, #1
 8005052:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005054:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005058:	f000 f870 	bl	800513c <FLASH_WaitForLastOperation>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d12b      	bne.n	80050be <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800506c:	783b      	ldrb	r3, [r7, #0]
 800506e:	4619      	mov	r1, r3
 8005070:	68b8      	ldr	r0, [r7, #8]
 8005072:	f000 f919 	bl	80052a8 <FLASH_Program_Byte>
 8005076:	e016      	b.n	80050a6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d105      	bne.n	800508a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800507e:	883b      	ldrh	r3, [r7, #0]
 8005080:	4619      	mov	r1, r3
 8005082:	68b8      	ldr	r0, [r7, #8]
 8005084:	f000 f8ec 	bl	8005260 <FLASH_Program_HalfWord>
 8005088:	e00d      	b.n	80050a6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d105      	bne.n	800509c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4619      	mov	r1, r3
 8005094:	68b8      	ldr	r0, [r7, #8]
 8005096:	f000 f8c1 	bl	800521c <FLASH_Program_Word>
 800509a:	e004      	b.n	80050a6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800509c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a0:	68b8      	ldr	r0, [r7, #8]
 80050a2:	f000 f88b 	bl	80051bc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050aa:	f000 f847 	bl	800513c <FLASH_WaitForLastOperation>
 80050ae:	4603      	mov	r3, r0
 80050b0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <HAL_FLASH_Program+0xa4>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <HAL_FLASH_Program+0xa4>)
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80050be:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <HAL_FLASH_Program+0xa0>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80050c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	2000062c 	.word	0x2000062c
 80050d4:	40023c00 	.word	0x40023c00

080050d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80050de:	2300      	movs	r3, #0
 80050e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050e2:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_FLASH_Unlock+0x38>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da0b      	bge.n	8005102 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80050ea:	4b09      	ldr	r3, [pc, #36]	; (8005110 <HAL_FLASH_Unlock+0x38>)
 80050ec:	4a09      	ldr	r2, [pc, #36]	; (8005114 <HAL_FLASH_Unlock+0x3c>)
 80050ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80050f0:	4b07      	ldr	r3, [pc, #28]	; (8005110 <HAL_FLASH_Unlock+0x38>)
 80050f2:	4a09      	ldr	r2, [pc, #36]	; (8005118 <HAL_FLASH_Unlock+0x40>)
 80050f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <HAL_FLASH_Unlock+0x38>)
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	da01      	bge.n	8005102 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005102:	79fb      	ldrb	r3, [r7, #7]
}
 8005104:	4618      	mov	r0, r3
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40023c00 	.word	0x40023c00
 8005114:	45670123 	.word	0x45670123
 8005118:	cdef89ab 	.word	0xcdef89ab

0800511c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005120:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_FLASH_Lock+0x1c>)
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	4a04      	ldr	r2, [pc, #16]	; (8005138 <HAL_FLASH_Lock+0x1c>)
 8005126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800512a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40023c00 	.word	0x40023c00

0800513c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005148:	4b1a      	ldr	r3, [pc, #104]	; (80051b4 <FLASH_WaitForLastOperation+0x78>)
 800514a:	2200      	movs	r2, #0
 800514c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800514e:	f7ff fe17 	bl	8004d80 <HAL_GetTick>
 8005152:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005154:	e010      	b.n	8005178 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515c:	d00c      	beq.n	8005178 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <FLASH_WaitForLastOperation+0x38>
 8005164:	f7ff fe0c 	bl	8004d80 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	d201      	bcs.n	8005178 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e019      	b.n	80051ac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005178:	4b0f      	ldr	r3, [pc, #60]	; (80051b8 <FLASH_WaitForLastOperation+0x7c>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e8      	bne.n	8005156 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <FLASH_WaitForLastOperation+0x7c>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <FLASH_WaitForLastOperation+0x7c>)
 8005192:	2201      	movs	r2, #1
 8005194:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005196:	4b08      	ldr	r3, [pc, #32]	; (80051b8 <FLASH_WaitForLastOperation+0x7c>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80051a2:	f000 f8a3 	bl	80052ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e000      	b.n	80051ac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
  
}  
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	2000062c 	.word	0x2000062c
 80051b8:	40023c00 	.word	0x40023c00

080051bc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80051bc:	b490      	push	{r4, r7}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80051c8:	4b13      	ldr	r3, [pc, #76]	; (8005218 <FLASH_Program_DoubleWord+0x5c>)
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	4a12      	ldr	r2, [pc, #72]	; (8005218 <FLASH_Program_DoubleWord+0x5c>)
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80051d4:	4b10      	ldr	r3, [pc, #64]	; (8005218 <FLASH_Program_DoubleWord+0x5c>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	4a0f      	ldr	r2, [pc, #60]	; (8005218 <FLASH_Program_DoubleWord+0x5c>)
 80051da:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80051de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80051e0:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <FLASH_Program_DoubleWord+0x5c>)
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <FLASH_Program_DoubleWord+0x5c>)
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80051f2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80051f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	f04f 0400 	mov.w	r4, #0
 8005202:	0013      	movs	r3, r2
 8005204:	2400      	movs	r4, #0
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	3204      	adds	r2, #4
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bc90      	pop	{r4, r7}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40023c00 	.word	0x40023c00

0800521c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <FLASH_Program_Word+0x40>)
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	4a0c      	ldr	r2, [pc, #48]	; (800525c <FLASH_Program_Word+0x40>)
 800522c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005230:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005232:	4b0a      	ldr	r3, [pc, #40]	; (800525c <FLASH_Program_Word+0x40>)
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	4a09      	ldr	r2, [pc, #36]	; (800525c <FLASH_Program_Word+0x40>)
 8005238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800523c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <FLASH_Program_Word+0x40>)
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	4a06      	ldr	r2, [pc, #24]	; (800525c <FLASH_Program_Word+0x40>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	601a      	str	r2, [r3, #0]
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr
 800525c:	40023c00 	.word	0x40023c00

08005260 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800526c:	4b0d      	ldr	r3, [pc, #52]	; (80052a4 <FLASH_Program_HalfWord+0x44>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <FLASH_Program_HalfWord+0x44>)
 8005272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005278:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <FLASH_Program_HalfWord+0x44>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	4a09      	ldr	r2, [pc, #36]	; (80052a4 <FLASH_Program_HalfWord+0x44>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005284:	4b07      	ldr	r3, [pc, #28]	; (80052a4 <FLASH_Program_HalfWord+0x44>)
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	4a06      	ldr	r2, [pc, #24]	; (80052a4 <FLASH_Program_HalfWord+0x44>)
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	801a      	strh	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40023c00 	.word	0x40023c00

080052a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052b4:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <FLASH_Program_Byte+0x40>)
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	4a0b      	ldr	r2, [pc, #44]	; (80052e8 <FLASH_Program_Byte+0x40>)
 80052ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <FLASH_Program_Byte+0x40>)
 80052c2:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <FLASH_Program_Byte+0x40>)
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <FLASH_Program_Byte+0x40>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4a06      	ldr	r2, [pc, #24]	; (80052e8 <FLASH_Program_Byte+0x40>)
 80052ce:	f043 0301 	orr.w	r3, r3, #1
 80052d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	78fa      	ldrb	r2, [r7, #3]
 80052d8:	701a      	strb	r2, [r3, #0]
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40023c00 	.word	0x40023c00

080052ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80052f0:	4b27      	ldr	r3, [pc, #156]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80052fc:	4b25      	ldr	r3, [pc, #148]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f043 0310 	orr.w	r3, r3, #16
 8005304:	4a23      	ldr	r2, [pc, #140]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 8005306:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005308:	4b21      	ldr	r3, [pc, #132]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 800530a:	2210      	movs	r2, #16
 800530c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800530e:	4b20      	ldr	r3, [pc, #128]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d008      	beq.n	800532c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800531a:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f043 0308 	orr.w	r3, r3, #8
 8005322:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 8005324:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005326:	4b1a      	ldr	r3, [pc, #104]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 8005328:	2220      	movs	r2, #32
 800532a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005338:	4b16      	ldr	r3, [pc, #88]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f043 0304 	orr.w	r3, r3, #4
 8005340:	4a14      	ldr	r2, [pc, #80]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 8005342:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005344:	4b12      	ldr	r3, [pc, #72]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 8005346:	2240      	movs	r2, #64	; 0x40
 8005348:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800534a:	4b11      	ldr	r3, [pc, #68]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005356:	4b0f      	ldr	r3, [pc, #60]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f043 0302 	orr.w	r3, r3, #2
 800535e:	4a0d      	ldr	r2, [pc, #52]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 8005360:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 8005364:	2280      	movs	r2, #128	; 0x80
 8005366:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005368:	4b09      	ldr	r3, [pc, #36]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005374:	4b07      	ldr	r3, [pc, #28]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f043 0320 	orr.w	r3, r3, #32
 800537c:	4a05      	ldr	r2, [pc, #20]	; (8005394 <FLASH_SetErrorCode+0xa8>)
 800537e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <FLASH_SetErrorCode+0xa4>)
 8005382:	2202      	movs	r2, #2
 8005384:	60da      	str	r2, [r3, #12]
  }
}
 8005386:	bf00      	nop
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40023c00 	.word	0x40023c00
 8005394:	2000062c 	.word	0x2000062c

08005398 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80053a8:	78fb      	ldrb	r3, [r7, #3]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e010      	b.n	80053d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d103      	bne.n	80053c2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80053ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	e009      	b.n	80053d6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80053c2:	78fb      	ldrb	r3, [r7, #3]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d103      	bne.n	80053d0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80053c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053cc:	60fb      	str	r3, [r7, #12]
 80053ce:	e002      	b.n	80053d6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80053d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053d6:	4b13      	ldr	r3, [pc, #76]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	4a12      	ldr	r2, [pc, #72]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80053e2:	4b10      	ldr	r3, [pc, #64]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	490f      	ldr	r1, [pc, #60]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80053ee:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053f4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80053f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80053fa:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	4313      	orrs	r3, r2
 8005404:	4a07      	ldr	r2, [pc, #28]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 8005406:	f043 0302 	orr.w	r3, r3, #2
 800540a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <FLASH_Erase_Sector+0x8c>)
 8005412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005416:	6113      	str	r3, [r2, #16]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40023c00 	.word	0x40023c00

08005428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005428:	b480      	push	{r7}
 800542a:	b089      	sub	sp, #36	; 0x24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005432:	2300      	movs	r3, #0
 8005434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800543a:	2300      	movs	r3, #0
 800543c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800543e:	2300      	movs	r3, #0
 8005440:	61fb      	str	r3, [r7, #28]
 8005442:	e16b      	b.n	800571c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005444:	2201      	movs	r2, #1
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	fa02 f303 	lsl.w	r3, r2, r3
 800544c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	429a      	cmp	r2, r3
 800545e:	f040 815a 	bne.w	8005716 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d00b      	beq.n	8005482 <HAL_GPIO_Init+0x5a>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d007      	beq.n	8005482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005476:	2b11      	cmp	r3, #17
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b12      	cmp	r3, #18
 8005480:	d130      	bne.n	80054e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	2203      	movs	r2, #3
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4013      	ands	r3, r2
 8005498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	fa02 f303 	lsl.w	r3, r2, r3
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054b8:	2201      	movs	r2, #1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	43db      	mvns	r3, r3
 80054c2:	69ba      	ldr	r2, [r7, #24]
 80054c4:	4013      	ands	r3, r2
 80054c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 0201 	and.w	r2, r3, #1
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4313      	orrs	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	2203      	movs	r2, #3
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	43db      	mvns	r3, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4013      	ands	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0xfc>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b12      	cmp	r3, #18
 8005522:	d123      	bne.n	800556c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	08da      	lsrs	r2, r3, #3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3208      	adds	r2, #8
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	69ba      	ldr	r2, [r7, #24]
 8005544:	4013      	ands	r3, r2
 8005546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	4313      	orrs	r3, r2
 800555c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	08da      	lsrs	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3208      	adds	r2, #8
 8005566:	69b9      	ldr	r1, [r7, #24]
 8005568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4013      	ands	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0203 	and.w	r2, r3, #3
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80b4 	beq.w	8005716 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	4b5f      	ldr	r3, [pc, #380]	; (8005730 <HAL_GPIO_Init+0x308>)
 80055b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b6:	4a5e      	ldr	r2, [pc, #376]	; (8005730 <HAL_GPIO_Init+0x308>)
 80055b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055bc:	6453      	str	r3, [r2, #68]	; 0x44
 80055be:	4b5c      	ldr	r3, [pc, #368]	; (8005730 <HAL_GPIO_Init+0x308>)
 80055c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055ca:	4a5a      	ldr	r2, [pc, #360]	; (8005734 <HAL_GPIO_Init+0x30c>)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	089b      	lsrs	r3, r3, #2
 80055d0:	3302      	adds	r3, #2
 80055d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f003 0303 	and.w	r3, r3, #3
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	220f      	movs	r2, #15
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a51      	ldr	r2, [pc, #324]	; (8005738 <HAL_GPIO_Init+0x310>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02b      	beq.n	800564e <HAL_GPIO_Init+0x226>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a50      	ldr	r2, [pc, #320]	; (800573c <HAL_GPIO_Init+0x314>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d025      	beq.n	800564a <HAL_GPIO_Init+0x222>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a4f      	ldr	r2, [pc, #316]	; (8005740 <HAL_GPIO_Init+0x318>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <HAL_GPIO_Init+0x21e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a4e      	ldr	r2, [pc, #312]	; (8005744 <HAL_GPIO_Init+0x31c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d019      	beq.n	8005642 <HAL_GPIO_Init+0x21a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <HAL_GPIO_Init+0x320>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d013      	beq.n	800563e <HAL_GPIO_Init+0x216>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a4c      	ldr	r2, [pc, #304]	; (800574c <HAL_GPIO_Init+0x324>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00d      	beq.n	800563a <HAL_GPIO_Init+0x212>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a4b      	ldr	r2, [pc, #300]	; (8005750 <HAL_GPIO_Init+0x328>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <HAL_GPIO_Init+0x20e>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a4a      	ldr	r2, [pc, #296]	; (8005754 <HAL_GPIO_Init+0x32c>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_GPIO_Init+0x20a>
 800562e:	2307      	movs	r3, #7
 8005630:	e00e      	b.n	8005650 <HAL_GPIO_Init+0x228>
 8005632:	2308      	movs	r3, #8
 8005634:	e00c      	b.n	8005650 <HAL_GPIO_Init+0x228>
 8005636:	2306      	movs	r3, #6
 8005638:	e00a      	b.n	8005650 <HAL_GPIO_Init+0x228>
 800563a:	2305      	movs	r3, #5
 800563c:	e008      	b.n	8005650 <HAL_GPIO_Init+0x228>
 800563e:	2304      	movs	r3, #4
 8005640:	e006      	b.n	8005650 <HAL_GPIO_Init+0x228>
 8005642:	2303      	movs	r3, #3
 8005644:	e004      	b.n	8005650 <HAL_GPIO_Init+0x228>
 8005646:	2302      	movs	r3, #2
 8005648:	e002      	b.n	8005650 <HAL_GPIO_Init+0x228>
 800564a:	2301      	movs	r3, #1
 800564c:	e000      	b.n	8005650 <HAL_GPIO_Init+0x228>
 800564e:	2300      	movs	r3, #0
 8005650:	69fa      	ldr	r2, [r7, #28]
 8005652:	f002 0203 	and.w	r2, r2, #3
 8005656:	0092      	lsls	r2, r2, #2
 8005658:	4093      	lsls	r3, r2
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005660:	4934      	ldr	r1, [pc, #208]	; (8005734 <HAL_GPIO_Init+0x30c>)
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	089b      	lsrs	r3, r3, #2
 8005666:	3302      	adds	r3, #2
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800566e:	4b3a      	ldr	r3, [pc, #232]	; (8005758 <HAL_GPIO_Init+0x330>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	43db      	mvns	r3, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4013      	ands	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005692:	4a31      	ldr	r2, [pc, #196]	; (8005758 <HAL_GPIO_Init+0x330>)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005698:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <HAL_GPIO_Init+0x330>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <HAL_GPIO_Init+0x330>)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056c2:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_GPIO_Init+0x330>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	43db      	mvns	r3, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4013      	ands	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80056de:	69ba      	ldr	r2, [r7, #24]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056e6:	4a1c      	ldr	r2, [pc, #112]	; (8005758 <HAL_GPIO_Init+0x330>)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <HAL_GPIO_Init+0x330>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d003      	beq.n	8005710 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005710:	4a11      	ldr	r2, [pc, #68]	; (8005758 <HAL_GPIO_Init+0x330>)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3301      	adds	r3, #1
 800571a:	61fb      	str	r3, [r7, #28]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	f67f ae90 	bls.w	8005444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005724:	bf00      	nop
 8005726:	3724      	adds	r7, #36	; 0x24
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	40023800 	.word	0x40023800
 8005734:	40013800 	.word	0x40013800
 8005738:	40020000 	.word	0x40020000
 800573c:	40020400 	.word	0x40020400
 8005740:	40020800 	.word	0x40020800
 8005744:	40020c00 	.word	0x40020c00
 8005748:	40021000 	.word	0x40021000
 800574c:	40021400 	.word	0x40021400
 8005750:	40021800 	.word	0x40021800
 8005754:	40021c00 	.word	0x40021c00
 8005758:	40013c00 	.word	0x40013c00

0800575c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e25b      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d075      	beq.n	8005866 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800577a:	4ba3      	ldr	r3, [pc, #652]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 030c 	and.w	r3, r3, #12
 8005782:	2b04      	cmp	r3, #4
 8005784:	d00c      	beq.n	80057a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005786:	4ba0      	ldr	r3, [pc, #640]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800578e:	2b08      	cmp	r3, #8
 8005790:	d112      	bne.n	80057b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005792:	4b9d      	ldr	r3, [pc, #628]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800579e:	d10b      	bne.n	80057b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a0:	4b99      	ldr	r3, [pc, #612]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05b      	beq.n	8005864 <HAL_RCC_OscConfig+0x108>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d157      	bne.n	8005864 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e236      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c0:	d106      	bne.n	80057d0 <HAL_RCC_OscConfig+0x74>
 80057c2:	4b91      	ldr	r3, [pc, #580]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a90      	ldr	r2, [pc, #576]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	e01d      	b.n	800580c <HAL_RCC_OscConfig+0xb0>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057d8:	d10c      	bne.n	80057f4 <HAL_RCC_OscConfig+0x98>
 80057da:	4b8b      	ldr	r3, [pc, #556]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a8a      	ldr	r2, [pc, #552]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	4b88      	ldr	r3, [pc, #544]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a87      	ldr	r2, [pc, #540]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	e00b      	b.n	800580c <HAL_RCC_OscConfig+0xb0>
 80057f4:	4b84      	ldr	r3, [pc, #528]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a83      	ldr	r2, [pc, #524]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80057fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b81      	ldr	r3, [pc, #516]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a80      	ldr	r2, [pc, #512]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005806:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005814:	f7ff fab4 	bl	8004d80 <HAL_GetTick>
 8005818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581c:	f7ff fab0 	bl	8004d80 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e1fb      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0xc0>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583c:	f7ff faa0 	bl	8004d80 <HAL_GetTick>
 8005840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005844:	f7ff fa9c 	bl	8004d80 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e1e7      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005856:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0xe8>
 8005862:	e000      	b.n	8005866 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d063      	beq.n	800593a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005872:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 030c 	and.w	r3, r3, #12
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00b      	beq.n	8005896 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800587e:	4b62      	ldr	r3, [pc, #392]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005886:	2b08      	cmp	r3, #8
 8005888:	d11c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588a:	4b5f      	ldr	r3, [pc, #380]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d116      	bne.n	80058c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005896:	4b5c      	ldr	r3, [pc, #368]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d005      	beq.n	80058ae <HAL_RCC_OscConfig+0x152>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d001      	beq.n	80058ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e1bb      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ae:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4952      	ldr	r1, [pc, #328]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c2:	e03a      	b.n	800593a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d020      	beq.n	800590e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058cc:	4b4f      	ldr	r3, [pc, #316]	; (8005a0c <HAL_RCC_OscConfig+0x2b0>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d2:	f7ff fa55 	bl	8004d80 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058d8:	e008      	b.n	80058ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058da:	f7ff fa51 	bl	8004d80 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e19c      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ec:	4b46      	ldr	r3, [pc, #280]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d0f0      	beq.n	80058da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f8:	4b43      	ldr	r3, [pc, #268]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4940      	ldr	r1, [pc, #256]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005908:	4313      	orrs	r3, r2
 800590a:	600b      	str	r3, [r1, #0]
 800590c:	e015      	b.n	800593a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800590e:	4b3f      	ldr	r3, [pc, #252]	; (8005a0c <HAL_RCC_OscConfig+0x2b0>)
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7ff fa34 	bl	8004d80 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800591c:	f7ff fa30 	bl	8004d80 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e17b      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800592e:	4b36      	ldr	r3, [pc, #216]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d030      	beq.n	80059a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800594e:	4b30      	ldr	r3, [pc, #192]	; (8005a10 <HAL_RCC_OscConfig+0x2b4>)
 8005950:	2201      	movs	r2, #1
 8005952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005954:	f7ff fa14 	bl	8004d80 <HAL_GetTick>
 8005958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595a:	e008      	b.n	800596e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800595c:	f7ff fa10 	bl	8004d80 <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	2b02      	cmp	r3, #2
 8005968:	d901      	bls.n	800596e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e15b      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800596e:	4b26      	ldr	r3, [pc, #152]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d0f0      	beq.n	800595c <HAL_RCC_OscConfig+0x200>
 800597a:	e015      	b.n	80059a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800597c:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <HAL_RCC_OscConfig+0x2b4>)
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005982:	f7ff f9fd 	bl	8004d80 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800598a:	f7ff f9f9 	bl	8004d80 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e144      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800599c:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 800599e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f0      	bne.n	800598a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 80a0 	beq.w	8005af6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059b6:	2300      	movs	r3, #0
 80059b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059ba:	4b13      	ldr	r3, [pc, #76]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	2300      	movs	r3, #0
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	4b0f      	ldr	r3, [pc, #60]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	4a0e      	ldr	r2, [pc, #56]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d4:	6413      	str	r3, [r2, #64]	; 0x40
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <HAL_RCC_OscConfig+0x2ac>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059de:	60bb      	str	r3, [r7, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e2:	2301      	movs	r3, #1
 80059e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_OscConfig+0x2b8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d121      	bne.n	8005a36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <HAL_RCC_OscConfig+0x2b8>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <HAL_RCC_OscConfig+0x2b8>)
 80059f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fe:	f7ff f9bf 	bl	8004d80 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a04:	e011      	b.n	8005a2a <HAL_RCC_OscConfig+0x2ce>
 8005a06:	bf00      	nop
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	42470000 	.word	0x42470000
 8005a10:	42470e80 	.word	0x42470e80
 8005a14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a18:	f7ff f9b2 	bl	8004d80 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e0fd      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2a:	4b81      	ldr	r3, [pc, #516]	; (8005c30 <HAL_RCC_OscConfig+0x4d4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0f0      	beq.n	8005a18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d106      	bne.n	8005a4c <HAL_RCC_OscConfig+0x2f0>
 8005a3e:	4b7d      	ldr	r3, [pc, #500]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a42:	4a7c      	ldr	r2, [pc, #496]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a44:	f043 0301 	orr.w	r3, r3, #1
 8005a48:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4a:	e01c      	b.n	8005a86 <HAL_RCC_OscConfig+0x32a>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b05      	cmp	r3, #5
 8005a52:	d10c      	bne.n	8005a6e <HAL_RCC_OscConfig+0x312>
 8005a54:	4b77      	ldr	r3, [pc, #476]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a58:	4a76      	ldr	r2, [pc, #472]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a5a:	f043 0304 	orr.w	r3, r3, #4
 8005a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a60:	4b74      	ldr	r3, [pc, #464]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a64:	4a73      	ldr	r2, [pc, #460]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6c:	e00b      	b.n	8005a86 <HAL_RCC_OscConfig+0x32a>
 8005a6e:	4b71      	ldr	r3, [pc, #452]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a72:	4a70      	ldr	r2, [pc, #448]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a74:	f023 0301 	bic.w	r3, r3, #1
 8005a78:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7a:	4b6e      	ldr	r3, [pc, #440]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7e:	4a6d      	ldr	r2, [pc, #436]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005a80:	f023 0304 	bic.w	r3, r3, #4
 8005a84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d015      	beq.n	8005aba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8e:	f7ff f977 	bl	8004d80 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	e00a      	b.n	8005aac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a96:	f7ff f973 	bl	8004d80 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e0bc      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aac:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0ee      	beq.n	8005a96 <HAL_RCC_OscConfig+0x33a>
 8005ab8:	e014      	b.n	8005ae4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aba:	f7ff f961 	bl	8004d80 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7ff f95d 	bl	8004d80 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e0a6      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ad8:	4b56      	ldr	r3, [pc, #344]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d105      	bne.n	8005af6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aea:	4b52      	ldr	r3, [pc, #328]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	4a51      	ldr	r2, [pc, #324]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8092 	beq.w	8005c24 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b00:	4b4c      	ldr	r3, [pc, #304]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f003 030c 	and.w	r3, r3, #12
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d05c      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d141      	bne.n	8005b98 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b14:	4b48      	ldr	r3, [pc, #288]	; (8005c38 <HAL_RCC_OscConfig+0x4dc>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7ff f931 	bl	8004d80 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b22:	f7ff f92d 	bl	8004d80 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e078      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b34:	4b3f      	ldr	r3, [pc, #252]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f0      	bne.n	8005b22 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	019b      	lsls	r3, r3, #6
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	041b      	lsls	r3, r3, #16
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	4933      	ldr	r1, [pc, #204]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <HAL_RCC_OscConfig+0x4dc>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7ff f906 	bl	8004d80 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b78:	f7ff f902 	bl	8004d80 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e04d      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8a:	4b2a      	ldr	r3, [pc, #168]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <HAL_RCC_OscConfig+0x41c>
 8005b96:	e045      	b.n	8005c24 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b98:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <HAL_RCC_OscConfig+0x4dc>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b9e:	f7ff f8ef 	bl	8004d80 <HAL_GetTick>
 8005ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ba6:	f7ff f8eb 	bl	8004d80 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e036      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bb8:	4b1e      	ldr	r3, [pc, #120]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f0      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x44a>
 8005bc4:	e02e      	b.n	8005c24 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e029      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <HAL_RCC_OscConfig+0x4d8>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d11c      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d115      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10d      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d106      	bne.n	8005c20 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40007000 	.word	0x40007000
 8005c34:	40023800 	.word	0x40023800
 8005c38:	42470060 	.word	0x42470060

08005c3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e0cc      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c50:	4b68      	ldr	r3, [pc, #416]	; (8005df4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d90c      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c5e:	4b65      	ldr	r3, [pc, #404]	; (8005df4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b63      	ldr	r3, [pc, #396]	; (8005df4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e0b8      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d020      	beq.n	8005cc6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c90:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	4a58      	ldr	r2, [pc, #352]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ca8:	4b53      	ldr	r3, [pc, #332]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a52      	ldr	r2, [pc, #328]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb4:	4b50      	ldr	r3, [pc, #320]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	494d      	ldr	r1, [pc, #308]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d044      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d107      	bne.n	8005cea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cda:	4b47      	ldr	r3, [pc, #284]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d119      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e07f      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d003      	beq.n	8005cfa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d107      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfa:	4b3f      	ldr	r3, [pc, #252]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d109      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e06f      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d0a:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e067      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d1a:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f023 0203 	bic.w	r2, r3, #3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	4934      	ldr	r1, [pc, #208]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d2c:	f7ff f828 	bl	8004d80 <HAL_GetTick>
 8005d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d32:	e00a      	b.n	8005d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d34:	f7ff f824 	bl	8004d80 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e04f      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4a:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f003 020c 	and.w	r2, r3, #12
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d1eb      	bne.n	8005d34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d5c:	4b25      	ldr	r3, [pc, #148]	; (8005df4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 030f 	and.w	r3, r3, #15
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d20c      	bcs.n	8005d84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6a:	4b22      	ldr	r3, [pc, #136]	; (8005df4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d72:	4b20      	ldr	r3, [pc, #128]	; (8005df4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d001      	beq.n	8005d84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e032      	b.n	8005dea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d90:	4b19      	ldr	r3, [pc, #100]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	4916      	ldr	r1, [pc, #88]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d009      	beq.n	8005dc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dae:	4b12      	ldr	r3, [pc, #72]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	490e      	ldr	r1, [pc, #56]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dc2:	f000 f821 	bl	8005e08 <HAL_RCC_GetSysClockFreq>
 8005dc6:	4601      	mov	r1, r0
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	f003 030f 	and.w	r3, r3, #15
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <HAL_RCC_ClockConfig+0x1c0>)
 8005dd4:	5cd3      	ldrb	r3, [r2, r3]
 8005dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8005dda:	4a09      	ldr	r2, [pc, #36]	; (8005e00 <HAL_RCC_ClockConfig+0x1c4>)
 8005ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <HAL_RCC_ClockConfig+0x1c8>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe ff88 	bl	8004cf8 <HAL_InitTick>

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023c00 	.word	0x40023c00
 8005df8:	40023800 	.word	0x40023800
 8005dfc:	08007720 	.word	0x08007720
 8005e00:	20000000 	.word	0x20000000
 8005e04:	20000004 	.word	0x20000004

08005e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	2300      	movs	r3, #0
 8005e18:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e1e:	4b50      	ldr	r3, [pc, #320]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b04      	cmp	r3, #4
 8005e28:	d007      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0x32>
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d008      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x38>
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 808d 	bne.w	8005f4e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e34:	4b4b      	ldr	r3, [pc, #300]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005e36:	60bb      	str	r3, [r7, #8]
       break;
 8005e38:	e08c      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e3a:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e3c:	60bb      	str	r3, [r7, #8]
      break;
 8005e3e:	e089      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e40:	4b47      	ldr	r3, [pc, #284]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e4a:	4b45      	ldr	r3, [pc, #276]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d023      	beq.n	8005e9e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e56:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x158>)
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	099b      	lsrs	r3, r3, #6
 8005e5c:	f04f 0400 	mov.w	r4, #0
 8005e60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	ea03 0501 	and.w	r5, r3, r1
 8005e6c:	ea04 0602 	and.w	r6, r4, r2
 8005e70:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e72:	fb02 f106 	mul.w	r1, r2, r6
 8005e76:	2200      	movs	r2, #0
 8005e78:	fb02 f205 	mul.w	r2, r2, r5
 8005e7c:	440a      	add	r2, r1
 8005e7e:	493a      	ldr	r1, [pc, #232]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e80:	fba5 0101 	umull	r0, r1, r5, r1
 8005e84:	1853      	adds	r3, r2, r1
 8005e86:	4619      	mov	r1, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f04f 0400 	mov.w	r4, #0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4623      	mov	r3, r4
 8005e92:	f7fe f9ed 	bl	8004270 <__aeabi_uldivmod>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e049      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e9e:	4b30      	ldr	r3, [pc, #192]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	099b      	lsrs	r3, r3, #6
 8005ea4:	f04f 0400 	mov.w	r4, #0
 8005ea8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	ea03 0501 	and.w	r5, r3, r1
 8005eb4:	ea04 0602 	and.w	r6, r4, r2
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4632      	mov	r2, r6
 8005ebc:	f04f 0300 	mov.w	r3, #0
 8005ec0:	f04f 0400 	mov.w	r4, #0
 8005ec4:	0154      	lsls	r4, r2, #5
 8005ec6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005eca:	014b      	lsls	r3, r1, #5
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4622      	mov	r2, r4
 8005ed0:	1b49      	subs	r1, r1, r5
 8005ed2:	eb62 0206 	sbc.w	r2, r2, r6
 8005ed6:	f04f 0300 	mov.w	r3, #0
 8005eda:	f04f 0400 	mov.w	r4, #0
 8005ede:	0194      	lsls	r4, r2, #6
 8005ee0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ee4:	018b      	lsls	r3, r1, #6
 8005ee6:	1a5b      	subs	r3, r3, r1
 8005ee8:	eb64 0402 	sbc.w	r4, r4, r2
 8005eec:	f04f 0100 	mov.w	r1, #0
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	00e2      	lsls	r2, r4, #3
 8005ef6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005efa:	00d9      	lsls	r1, r3, #3
 8005efc:	460b      	mov	r3, r1
 8005efe:	4614      	mov	r4, r2
 8005f00:	195b      	adds	r3, r3, r5
 8005f02:	eb44 0406 	adc.w	r4, r4, r6
 8005f06:	f04f 0100 	mov.w	r1, #0
 8005f0a:	f04f 0200 	mov.w	r2, #0
 8005f0e:	02a2      	lsls	r2, r4, #10
 8005f10:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f14:	0299      	lsls	r1, r3, #10
 8005f16:	460b      	mov	r3, r1
 8005f18:	4614      	mov	r4, r2
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 0400 	mov.w	r4, #0
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	f7fe f9a2 	bl	8004270 <__aeabi_uldivmod>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <HAL_RCC_GetSysClockFreq+0x158>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	0c1b      	lsrs	r3, r3, #16
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4a:	60bb      	str	r3, [r7, #8]
      break;
 8005f4c:	e002      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005f50:	60bb      	str	r3, [r7, #8]
      break;
 8005f52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f54:	68bb      	ldr	r3, [r7, #8]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40023800 	.word	0x40023800
 8005f64:	00f42400 	.word	0x00f42400
 8005f68:	017d7840 	.word	0x017d7840

08005f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f72:	681b      	ldr	r3, [r3, #0]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000000 	.word	0x20000000

08005f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f88:	f7ff fff0 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	0a9b      	lsrs	r3, r3, #10
 8005f94:	f003 0307 	and.w	r3, r3, #7
 8005f98:	4a03      	ldr	r2, [pc, #12]	; (8005fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f9a:	5cd3      	ldrb	r3, [r2, r3]
 8005f9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	08007730 	.word	0x08007730

08005fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fb0:	f7ff ffdc 	bl	8005f6c <HAL_RCC_GetHCLKFreq>
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4b05      	ldr	r3, [pc, #20]	; (8005fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	0b5b      	lsrs	r3, r3, #13
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	4a03      	ldr	r2, [pc, #12]	; (8005fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fc2:	5cd3      	ldrb	r3, [r2, r3]
 8005fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	08007730 	.word	0x08007730

08005fd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e03f      	b.n	8006066 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d106      	bne.n	8006000 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7fe fc96 	bl	800492c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2224      	movs	r2, #36	; 0x24
 8006004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006016:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fb29 	bl	8006670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800602c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695a      	ldr	r2, [r3, #20]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800603c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68da      	ldr	r2, [r3, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800604c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	4613      	mov	r3, r2
 800607a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b20      	cmp	r3, #32
 8006086:	d140      	bne.n	800610a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d002      	beq.n	8006094 <HAL_UART_Receive_IT+0x26>
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e039      	b.n	800610c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Receive_IT+0x38>
 80060a2:	2302      	movs	r3, #2
 80060a4:	e032      	b.n	800610c <HAL_UART_Receive_IT+0x9e>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	88fa      	ldrh	r2, [r7, #6]
 80060b8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	88fa      	ldrh	r2, [r7, #6]
 80060be:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2222      	movs	r2, #34	; 0x22
 80060ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060e4:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695a      	ldr	r2, [r3, #20]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0220 	orr.w	r2, r2, #32
 8006104:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800610a:	2302      	movs	r3, #2
  }
}
 800610c:	4618      	mov	r0, r3
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800612e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0201 	bic.w	r2, r2, #1
 800613e:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d12a      	bne.n	80061a4 <HAL_UART_AbortReceive_IT+0x8c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	695a      	ldr	r2, [r3, #20]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800615c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <HAL_UART_AbortReceive_IT+0x76>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616a:	4a16      	ldr	r2, [pc, #88]	; (80061c4 <HAL_UART_AbortReceive_IT+0xac>)
 800616c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006172:	4618      	mov	r0, r3
 8006174:	f7fe ff39 	bl	8004fea <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01c      	beq.n	80061b8 <HAL_UART_AbortReceive_IT+0xa0>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	e014      	b.n	80061b8 <HAL_UART_AbortReceive_IT+0xa0>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f927 	bl	80063f0 <HAL_UART_AbortReceiveCpltCallback>
 80061a2:	e009      	b.n	80061b8 <HAL_UART_AbortReceive_IT+0xa0>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f91c 	bl	80063f0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	08006469 	.word	0x08006469

080061c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10d      	bne.n	800621a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_IRQHandler+0x52>
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f9ab 	bl	800656e <UART_Receive_IT>
      return;
 8006218:	e0d1      	b.n	80063be <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80b0 	beq.w	8006382 <HAL_UART_IRQHandler+0x1ba>
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d105      	bne.n	8006238 <HAL_UART_IRQHandler+0x70>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80a5 	beq.w	8006382 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <HAL_UART_IRQHandler+0x90>
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006250:	f043 0201 	orr.w	r2, r3, #1
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	d00a      	beq.n	8006278 <HAL_UART_IRQHandler+0xb0>
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d005      	beq.n	8006278 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	f043 0202 	orr.w	r2, r3, #2
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_UART_IRQHandler+0xd0>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	f043 0204 	orr.w	r2, r3, #4
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00f      	beq.n	80062c2 <HAL_UART_IRQHandler+0xfa>
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	f003 0320 	and.w	r3, r3, #32
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d104      	bne.n	80062b6 <HAL_UART_IRQHandler+0xee>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ba:	f043 0208 	orr.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d078      	beq.n	80063bc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_UART_IRQHandler+0x11c>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d002      	beq.n	80062e4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f945 	bl	800656e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d102      	bne.n	800630c <HAL_UART_IRQHandler+0x144>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d031      	beq.n	8006370 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f879 	bl	8006404 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	d123      	bne.n	8006368 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <HAL_UART_IRQHandler+0x1fc>)
 800633e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fe50 	bl	8004fea <HAL_DMA_Abort_IT>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d016      	beq.n	800637e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800635a:	4610      	mov	r0, r2
 800635c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635e:	e00e      	b.n	800637e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 f83b 	bl	80063dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006366:	e00a      	b.n	800637e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f837 	bl	80063dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800636e:	e006      	b.n	800637e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f833 	bl	80063dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800637c:	e01e      	b.n	80063bc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637e:	bf00      	nop
    return;
 8006380:	e01c      	b.n	80063bc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006388:	2b00      	cmp	r3, #0
 800638a:	d008      	beq.n	800639e <HAL_UART_IRQHandler+0x1d6>
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f87b 	bl	8006492 <UART_Transmit_IT>
    return;
 800639c:	e00f      	b.n	80063be <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_UART_IRQHandler+0x1f6>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8c3 	bl	800653e <UART_EndTransmit_IT>
    return;
 80063b8:	bf00      	nop
 80063ba:	e000      	b.n	80063be <HAL_UART_IRQHandler+0x1f6>
    return;
 80063bc:	bf00      	nop
  }
}
 80063be:	3720      	adds	r7, #32
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	08006441 	.word	0x08006441

080063c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800641a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695a      	ldr	r2, [r3, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 0201 	bic.w	r2, r2, #1
 800642a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800644c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2200      	movs	r2, #0
 8006458:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f7ff ffbe 	bl	80063dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006474:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f7ff ffb3 	bl	80063f0 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800648a:	bf00      	nop
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b21      	cmp	r3, #33	; 0x21
 80064a4:	d144      	bne.n	8006530 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d11a      	bne.n	80064e6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d105      	bne.n	80064da <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	1c9a      	adds	r2, r3, #2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	621a      	str	r2, [r3, #32]
 80064d8:	e00e      	b.n	80064f8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]
 80064e4:	e008      	b.n	80064f8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	1c59      	adds	r1, r3, #1
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	6211      	str	r1, [r2, #32]
 80064f0:	781a      	ldrb	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29b      	uxth	r3, r3
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4619      	mov	r1, r3
 8006506:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10f      	bne.n	800652c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68da      	ldr	r2, [r3, #12]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800651a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68da      	ldr	r2, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800652c:	2300      	movs	r3, #0
 800652e:	e000      	b.n	8006532 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006530:	2302      	movs	r3, #2
  }
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b082      	sub	sp, #8
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006554:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2220      	movs	r2, #32
 800655a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff ff32 	bl	80063c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b084      	sub	sp, #16
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b22      	cmp	r3, #34	; 0x22
 8006580:	d171      	bne.n	8006666 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658a:	d123      	bne.n	80065d4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006590:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10e      	bne.n	80065b8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	1c9a      	adds	r2, r3, #2
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	629a      	str	r2, [r3, #40]	; 0x28
 80065b6:	e029      	b.n	800660c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b29b      	uxth	r3, r3
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	b29a      	uxth	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065cc:	1c5a      	adds	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	629a      	str	r2, [r3, #40]	; 0x28
 80065d2:	e01b      	b.n	800660c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6858      	ldr	r0, [r3, #4]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6291      	str	r1, [r2, #40]	; 0x28
 80065ec:	b2c2      	uxtb	r2, r0
 80065ee:	701a      	strb	r2, [r3, #0]
 80065f0:	e00c      	b.n	800660c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	1c58      	adds	r0, r3, #1
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	6288      	str	r0, [r1, #40]	; 0x28
 8006604:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006610:	b29b      	uxth	r3, r3
 8006612:	3b01      	subs	r3, #1
 8006614:	b29b      	uxth	r3, r3
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4619      	mov	r1, r3
 800661a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800661c:	2b00      	cmp	r3, #0
 800661e:	d120      	bne.n	8006662 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0220 	bic.w	r2, r2, #32
 800662e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800663e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0201 	bic.w	r2, r2, #1
 800664e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fe fa0f 	bl	8004a7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e002      	b.n	8006668 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006662:	2300      	movs	r3, #0
 8006664:	e000      	b.n	8006668 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	68da      	ldr	r2, [r3, #12]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	431a      	orrs	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066b2:	f023 030c 	bic.w	r3, r3, #12
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	430b      	orrs	r3, r1
 80066be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066de:	f040 818b 	bne.w	80069f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4ac1      	ldr	r2, [pc, #772]	; (80069ec <UART_SetConfig+0x37c>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d005      	beq.n	80066f8 <UART_SetConfig+0x88>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4abf      	ldr	r2, [pc, #764]	; (80069f0 <UART_SetConfig+0x380>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	f040 80bd 	bne.w	8006872 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066f8:	f7ff fc58 	bl	8005fac <HAL_RCC_GetPCLK2Freq>
 80066fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	461d      	mov	r5, r3
 8006702:	f04f 0600 	mov.w	r6, #0
 8006706:	46a8      	mov	r8, r5
 8006708:	46b1      	mov	r9, r6
 800670a:	eb18 0308 	adds.w	r3, r8, r8
 800670e:	eb49 0409 	adc.w	r4, r9, r9
 8006712:	4698      	mov	r8, r3
 8006714:	46a1      	mov	r9, r4
 8006716:	eb18 0805 	adds.w	r8, r8, r5
 800671a:	eb49 0906 	adc.w	r9, r9, r6
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800672a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800672e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006732:	4688      	mov	r8, r1
 8006734:	4691      	mov	r9, r2
 8006736:	eb18 0005 	adds.w	r0, r8, r5
 800673a:	eb49 0106 	adc.w	r1, r9, r6
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	461d      	mov	r5, r3
 8006744:	f04f 0600 	mov.w	r6, #0
 8006748:	196b      	adds	r3, r5, r5
 800674a:	eb46 0406 	adc.w	r4, r6, r6
 800674e:	461a      	mov	r2, r3
 8006750:	4623      	mov	r3, r4
 8006752:	f7fd fd8d 	bl	8004270 <__aeabi_uldivmod>
 8006756:	4603      	mov	r3, r0
 8006758:	460c      	mov	r4, r1
 800675a:	461a      	mov	r2, r3
 800675c:	4ba5      	ldr	r3, [pc, #660]	; (80069f4 <UART_SetConfig+0x384>)
 800675e:	fba3 2302 	umull	r2, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	461d      	mov	r5, r3
 800676c:	f04f 0600 	mov.w	r6, #0
 8006770:	46a9      	mov	r9, r5
 8006772:	46b2      	mov	sl, r6
 8006774:	eb19 0309 	adds.w	r3, r9, r9
 8006778:	eb4a 040a 	adc.w	r4, sl, sl
 800677c:	4699      	mov	r9, r3
 800677e:	46a2      	mov	sl, r4
 8006780:	eb19 0905 	adds.w	r9, r9, r5
 8006784:	eb4a 0a06 	adc.w	sl, sl, r6
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800679c:	4689      	mov	r9, r1
 800679e:	4692      	mov	sl, r2
 80067a0:	eb19 0005 	adds.w	r0, r9, r5
 80067a4:	eb4a 0106 	adc.w	r1, sl, r6
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	461d      	mov	r5, r3
 80067ae:	f04f 0600 	mov.w	r6, #0
 80067b2:	196b      	adds	r3, r5, r5
 80067b4:	eb46 0406 	adc.w	r4, r6, r6
 80067b8:	461a      	mov	r2, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	f7fd fd58 	bl	8004270 <__aeabi_uldivmod>
 80067c0:	4603      	mov	r3, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	461a      	mov	r2, r3
 80067c6:	4b8b      	ldr	r3, [pc, #556]	; (80069f4 <UART_SetConfig+0x384>)
 80067c8:	fba3 1302 	umull	r1, r3, r3, r2
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	2164      	movs	r1, #100	; 0x64
 80067d0:	fb01 f303 	mul.w	r3, r1, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	3332      	adds	r3, #50	; 0x32
 80067da:	4a86      	ldr	r2, [pc, #536]	; (80069f4 <UART_SetConfig+0x384>)
 80067dc:	fba2 2303 	umull	r2, r3, r2, r3
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067e8:	4498      	add	r8, r3
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	461d      	mov	r5, r3
 80067ee:	f04f 0600 	mov.w	r6, #0
 80067f2:	46a9      	mov	r9, r5
 80067f4:	46b2      	mov	sl, r6
 80067f6:	eb19 0309 	adds.w	r3, r9, r9
 80067fa:	eb4a 040a 	adc.w	r4, sl, sl
 80067fe:	4699      	mov	r9, r3
 8006800:	46a2      	mov	sl, r4
 8006802:	eb19 0905 	adds.w	r9, r9, r5
 8006806:	eb4a 0a06 	adc.w	sl, sl, r6
 800680a:	f04f 0100 	mov.w	r1, #0
 800680e:	f04f 0200 	mov.w	r2, #0
 8006812:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006816:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800681a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800681e:	4689      	mov	r9, r1
 8006820:	4692      	mov	sl, r2
 8006822:	eb19 0005 	adds.w	r0, r9, r5
 8006826:	eb4a 0106 	adc.w	r1, sl, r6
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	461d      	mov	r5, r3
 8006830:	f04f 0600 	mov.w	r6, #0
 8006834:	196b      	adds	r3, r5, r5
 8006836:	eb46 0406 	adc.w	r4, r6, r6
 800683a:	461a      	mov	r2, r3
 800683c:	4623      	mov	r3, r4
 800683e:	f7fd fd17 	bl	8004270 <__aeabi_uldivmod>
 8006842:	4603      	mov	r3, r0
 8006844:	460c      	mov	r4, r1
 8006846:	461a      	mov	r2, r3
 8006848:	4b6a      	ldr	r3, [pc, #424]	; (80069f4 <UART_SetConfig+0x384>)
 800684a:	fba3 1302 	umull	r1, r3, r3, r2
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2164      	movs	r1, #100	; 0x64
 8006852:	fb01 f303 	mul.w	r3, r1, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	3332      	adds	r3, #50	; 0x32
 800685c:	4a65      	ldr	r2, [pc, #404]	; (80069f4 <UART_SetConfig+0x384>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	f003 0207 	and.w	r2, r3, #7
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4442      	add	r2, r8
 800686e:	609a      	str	r2, [r3, #8]
 8006870:	e26f      	b.n	8006d52 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006872:	f7ff fb87 	bl	8005f84 <HAL_RCC_GetPCLK1Freq>
 8006876:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	461d      	mov	r5, r3
 800687c:	f04f 0600 	mov.w	r6, #0
 8006880:	46a8      	mov	r8, r5
 8006882:	46b1      	mov	r9, r6
 8006884:	eb18 0308 	adds.w	r3, r8, r8
 8006888:	eb49 0409 	adc.w	r4, r9, r9
 800688c:	4698      	mov	r8, r3
 800688e:	46a1      	mov	r9, r4
 8006890:	eb18 0805 	adds.w	r8, r8, r5
 8006894:	eb49 0906 	adc.w	r9, r9, r6
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068ac:	4688      	mov	r8, r1
 80068ae:	4691      	mov	r9, r2
 80068b0:	eb18 0005 	adds.w	r0, r8, r5
 80068b4:	eb49 0106 	adc.w	r1, r9, r6
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	461d      	mov	r5, r3
 80068be:	f04f 0600 	mov.w	r6, #0
 80068c2:	196b      	adds	r3, r5, r5
 80068c4:	eb46 0406 	adc.w	r4, r6, r6
 80068c8:	461a      	mov	r2, r3
 80068ca:	4623      	mov	r3, r4
 80068cc:	f7fd fcd0 	bl	8004270 <__aeabi_uldivmod>
 80068d0:	4603      	mov	r3, r0
 80068d2:	460c      	mov	r4, r1
 80068d4:	461a      	mov	r2, r3
 80068d6:	4b47      	ldr	r3, [pc, #284]	; (80069f4 <UART_SetConfig+0x384>)
 80068d8:	fba3 2302 	umull	r2, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	461d      	mov	r5, r3
 80068e6:	f04f 0600 	mov.w	r6, #0
 80068ea:	46a9      	mov	r9, r5
 80068ec:	46b2      	mov	sl, r6
 80068ee:	eb19 0309 	adds.w	r3, r9, r9
 80068f2:	eb4a 040a 	adc.w	r4, sl, sl
 80068f6:	4699      	mov	r9, r3
 80068f8:	46a2      	mov	sl, r4
 80068fa:	eb19 0905 	adds.w	r9, r9, r5
 80068fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8006902:	f04f 0100 	mov.w	r1, #0
 8006906:	f04f 0200 	mov.w	r2, #0
 800690a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800690e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006912:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006916:	4689      	mov	r9, r1
 8006918:	4692      	mov	sl, r2
 800691a:	eb19 0005 	adds.w	r0, r9, r5
 800691e:	eb4a 0106 	adc.w	r1, sl, r6
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	461d      	mov	r5, r3
 8006928:	f04f 0600 	mov.w	r6, #0
 800692c:	196b      	adds	r3, r5, r5
 800692e:	eb46 0406 	adc.w	r4, r6, r6
 8006932:	461a      	mov	r2, r3
 8006934:	4623      	mov	r3, r4
 8006936:	f7fd fc9b 	bl	8004270 <__aeabi_uldivmod>
 800693a:	4603      	mov	r3, r0
 800693c:	460c      	mov	r4, r1
 800693e:	461a      	mov	r2, r3
 8006940:	4b2c      	ldr	r3, [pc, #176]	; (80069f4 <UART_SetConfig+0x384>)
 8006942:	fba3 1302 	umull	r1, r3, r3, r2
 8006946:	095b      	lsrs	r3, r3, #5
 8006948:	2164      	movs	r1, #100	; 0x64
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	3332      	adds	r3, #50	; 0x32
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <UART_SetConfig+0x384>)
 8006956:	fba2 2303 	umull	r2, r3, r2, r3
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006962:	4498      	add	r8, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	461d      	mov	r5, r3
 8006968:	f04f 0600 	mov.w	r6, #0
 800696c:	46a9      	mov	r9, r5
 800696e:	46b2      	mov	sl, r6
 8006970:	eb19 0309 	adds.w	r3, r9, r9
 8006974:	eb4a 040a 	adc.w	r4, sl, sl
 8006978:	4699      	mov	r9, r3
 800697a:	46a2      	mov	sl, r4
 800697c:	eb19 0905 	adds.w	r9, r9, r5
 8006980:	eb4a 0a06 	adc.w	sl, sl, r6
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006998:	4689      	mov	r9, r1
 800699a:	4692      	mov	sl, r2
 800699c:	eb19 0005 	adds.w	r0, r9, r5
 80069a0:	eb4a 0106 	adc.w	r1, sl, r6
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	461d      	mov	r5, r3
 80069aa:	f04f 0600 	mov.w	r6, #0
 80069ae:	196b      	adds	r3, r5, r5
 80069b0:	eb46 0406 	adc.w	r4, r6, r6
 80069b4:	461a      	mov	r2, r3
 80069b6:	4623      	mov	r3, r4
 80069b8:	f7fd fc5a 	bl	8004270 <__aeabi_uldivmod>
 80069bc:	4603      	mov	r3, r0
 80069be:	460c      	mov	r4, r1
 80069c0:	461a      	mov	r2, r3
 80069c2:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <UART_SetConfig+0x384>)
 80069c4:	fba3 1302 	umull	r1, r3, r3, r2
 80069c8:	095b      	lsrs	r3, r3, #5
 80069ca:	2164      	movs	r1, #100	; 0x64
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	3332      	adds	r3, #50	; 0x32
 80069d6:	4a07      	ldr	r2, [pc, #28]	; (80069f4 <UART_SetConfig+0x384>)
 80069d8:	fba2 2303 	umull	r2, r3, r2, r3
 80069dc:	095b      	lsrs	r3, r3, #5
 80069de:	f003 0207 	and.w	r2, r3, #7
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4442      	add	r2, r8
 80069e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069ea:	e1b2      	b.n	8006d52 <UART_SetConfig+0x6e2>
 80069ec:	40011000 	.word	0x40011000
 80069f0:	40011400 	.word	0x40011400
 80069f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4ad7      	ldr	r2, [pc, #860]	; (8006d5c <UART_SetConfig+0x6ec>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d005      	beq.n	8006a0e <UART_SetConfig+0x39e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4ad6      	ldr	r2, [pc, #856]	; (8006d60 <UART_SetConfig+0x6f0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	f040 80d1 	bne.w	8006bb0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a0e:	f7ff facd 	bl	8005fac <HAL_RCC_GetPCLK2Freq>
 8006a12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	469a      	mov	sl, r3
 8006a18:	f04f 0b00 	mov.w	fp, #0
 8006a1c:	46d0      	mov	r8, sl
 8006a1e:	46d9      	mov	r9, fp
 8006a20:	eb18 0308 	adds.w	r3, r8, r8
 8006a24:	eb49 0409 	adc.w	r4, r9, r9
 8006a28:	4698      	mov	r8, r3
 8006a2a:	46a1      	mov	r9, r4
 8006a2c:	eb18 080a 	adds.w	r8, r8, sl
 8006a30:	eb49 090b 	adc.w	r9, r9, fp
 8006a34:	f04f 0100 	mov.w	r1, #0
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a48:	4688      	mov	r8, r1
 8006a4a:	4691      	mov	r9, r2
 8006a4c:	eb1a 0508 	adds.w	r5, sl, r8
 8006a50:	eb4b 0609 	adc.w	r6, fp, r9
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	f04f 0400 	mov.w	r4, #0
 8006a66:	0094      	lsls	r4, r2, #2
 8006a68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a6c:	008b      	lsls	r3, r1, #2
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4623      	mov	r3, r4
 8006a72:	4628      	mov	r0, r5
 8006a74:	4631      	mov	r1, r6
 8006a76:	f7fd fbfb 	bl	8004270 <__aeabi_uldivmod>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	461a      	mov	r2, r3
 8006a80:	4bb8      	ldr	r3, [pc, #736]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006a82:	fba3 2302 	umull	r2, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	469b      	mov	fp, r3
 8006a90:	f04f 0c00 	mov.w	ip, #0
 8006a94:	46d9      	mov	r9, fp
 8006a96:	46e2      	mov	sl, ip
 8006a98:	eb19 0309 	adds.w	r3, r9, r9
 8006a9c:	eb4a 040a 	adc.w	r4, sl, sl
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	46a2      	mov	sl, r4
 8006aa4:	eb19 090b 	adds.w	r9, r9, fp
 8006aa8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006aac:	f04f 0100 	mov.w	r1, #0
 8006ab0:	f04f 0200 	mov.w	r2, #0
 8006ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ab8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006abc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ac0:	4689      	mov	r9, r1
 8006ac2:	4692      	mov	sl, r2
 8006ac4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ac8:	eb4c 060a 	adc.w	r6, ip, sl
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	f04f 0400 	mov.w	r4, #0
 8006ade:	0094      	lsls	r4, r2, #2
 8006ae0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ae4:	008b      	lsls	r3, r1, #2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4623      	mov	r3, r4
 8006aea:	4628      	mov	r0, r5
 8006aec:	4631      	mov	r1, r6
 8006aee:	f7fd fbbf 	bl	8004270 <__aeabi_uldivmod>
 8006af2:	4603      	mov	r3, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	461a      	mov	r2, r3
 8006af8:	4b9a      	ldr	r3, [pc, #616]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006afa:	fba3 1302 	umull	r1, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	2164      	movs	r1, #100	; 0x64
 8006b02:	fb01 f303 	mul.w	r3, r1, r3
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	3332      	adds	r3, #50	; 0x32
 8006b0c:	4a95      	ldr	r2, [pc, #596]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b18:	4498      	add	r8, r3
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	469b      	mov	fp, r3
 8006b1e:	f04f 0c00 	mov.w	ip, #0
 8006b22:	46d9      	mov	r9, fp
 8006b24:	46e2      	mov	sl, ip
 8006b26:	eb19 0309 	adds.w	r3, r9, r9
 8006b2a:	eb4a 040a 	adc.w	r4, sl, sl
 8006b2e:	4699      	mov	r9, r3
 8006b30:	46a2      	mov	sl, r4
 8006b32:	eb19 090b 	adds.w	r9, r9, fp
 8006b36:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b3a:	f04f 0100 	mov.w	r1, #0
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b4e:	4689      	mov	r9, r1
 8006b50:	4692      	mov	sl, r2
 8006b52:	eb1b 0509 	adds.w	r5, fp, r9
 8006b56:	eb4c 060a 	adc.w	r6, ip, sl
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	f04f 0200 	mov.w	r2, #0
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	f04f 0400 	mov.w	r4, #0
 8006b6c:	0094      	lsls	r4, r2, #2
 8006b6e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b72:	008b      	lsls	r3, r1, #2
 8006b74:	461a      	mov	r2, r3
 8006b76:	4623      	mov	r3, r4
 8006b78:	4628      	mov	r0, r5
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	f7fd fb78 	bl	8004270 <__aeabi_uldivmod>
 8006b80:	4603      	mov	r3, r0
 8006b82:	460c      	mov	r4, r1
 8006b84:	461a      	mov	r2, r3
 8006b86:	4b77      	ldr	r3, [pc, #476]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006b88:	fba3 1302 	umull	r1, r3, r3, r2
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	2164      	movs	r1, #100	; 0x64
 8006b90:	fb01 f303 	mul.w	r3, r1, r3
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	3332      	adds	r3, #50	; 0x32
 8006b9a:	4a72      	ldr	r2, [pc, #456]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	f003 020f 	and.w	r2, r3, #15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4442      	add	r2, r8
 8006bac:	609a      	str	r2, [r3, #8]
 8006bae:	e0d0      	b.n	8006d52 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7ff f9e8 	bl	8005f84 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f04f 0b00 	mov.w	fp, #0
 8006bbe:	46d0      	mov	r8, sl
 8006bc0:	46d9      	mov	r9, fp
 8006bc2:	eb18 0308 	adds.w	r3, r8, r8
 8006bc6:	eb49 0409 	adc.w	r4, r9, r9
 8006bca:	4698      	mov	r8, r3
 8006bcc:	46a1      	mov	r9, r4
 8006bce:	eb18 080a 	adds.w	r8, r8, sl
 8006bd2:	eb49 090b 	adc.w	r9, r9, fp
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006be2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006be6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bea:	4688      	mov	r8, r1
 8006bec:	4691      	mov	r9, r2
 8006bee:	eb1a 0508 	adds.w	r5, sl, r8
 8006bf2:	eb4b 0609 	adc.w	r6, fp, r9
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	f04f 0400 	mov.w	r4, #0
 8006c08:	0094      	lsls	r4, r2, #2
 8006c0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	461a      	mov	r2, r3
 8006c12:	4623      	mov	r3, r4
 8006c14:	4628      	mov	r0, r5
 8006c16:	4631      	mov	r1, r6
 8006c18:	f7fd fb2a 	bl	8004270 <__aeabi_uldivmod>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	460c      	mov	r4, r1
 8006c20:	461a      	mov	r2, r3
 8006c22:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006c24:	fba3 2302 	umull	r2, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	469b      	mov	fp, r3
 8006c32:	f04f 0c00 	mov.w	ip, #0
 8006c36:	46d9      	mov	r9, fp
 8006c38:	46e2      	mov	sl, ip
 8006c3a:	eb19 0309 	adds.w	r3, r9, r9
 8006c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8006c42:	4699      	mov	r9, r3
 8006c44:	46a2      	mov	sl, r4
 8006c46:	eb19 090b 	adds.w	r9, r9, fp
 8006c4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c4e:	f04f 0100 	mov.w	r1, #0
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c62:	4689      	mov	r9, r1
 8006c64:	4692      	mov	sl, r2
 8006c66:	eb1b 0509 	adds.w	r5, fp, r9
 8006c6a:	eb4c 060a 	adc.w	r6, ip, sl
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	4619      	mov	r1, r3
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	f04f 0400 	mov.w	r4, #0
 8006c80:	0094      	lsls	r4, r2, #2
 8006c82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c86:	008b      	lsls	r3, r1, #2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4623      	mov	r3, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	4631      	mov	r1, r6
 8006c90:	f7fd faee 	bl	8004270 <__aeabi_uldivmod>
 8006c94:	4603      	mov	r3, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4b32      	ldr	r3, [pc, #200]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	2164      	movs	r1, #100	; 0x64
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	3332      	adds	r3, #50	; 0x32
 8006cae:	4a2d      	ldr	r2, [pc, #180]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cba:	4498      	add	r8, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	469b      	mov	fp, r3
 8006cc0:	f04f 0c00 	mov.w	ip, #0
 8006cc4:	46d9      	mov	r9, fp
 8006cc6:	46e2      	mov	sl, ip
 8006cc8:	eb19 0309 	adds.w	r3, r9, r9
 8006ccc:	eb4a 040a 	adc.w	r4, sl, sl
 8006cd0:	4699      	mov	r9, r3
 8006cd2:	46a2      	mov	sl, r4
 8006cd4:	eb19 090b 	adds.w	r9, r9, fp
 8006cd8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cdc:	f04f 0100 	mov.w	r1, #0
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ce8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cf0:	4689      	mov	r9, r1
 8006cf2:	4692      	mov	sl, r2
 8006cf4:	eb1b 0509 	adds.w	r5, fp, r9
 8006cf8:	eb4c 060a 	adc.w	r6, ip, sl
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	4619      	mov	r1, r3
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	f04f 0400 	mov.w	r4, #0
 8006d0e:	0094      	lsls	r4, r2, #2
 8006d10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d14:	008b      	lsls	r3, r1, #2
 8006d16:	461a      	mov	r2, r3
 8006d18:	4623      	mov	r3, r4
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	f7fd faa7 	bl	8004270 <__aeabi_uldivmod>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	461a      	mov	r2, r3
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006d2a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d2e:	095b      	lsrs	r3, r3, #5
 8006d30:	2164      	movs	r1, #100	; 0x64
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	3332      	adds	r3, #50	; 0x32
 8006d3c:	4a09      	ldr	r2, [pc, #36]	; (8006d64 <UART_SetConfig+0x6f4>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	f003 020f 	and.w	r2, r3, #15
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4442      	add	r2, r8
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	e7ff      	b.n	8006d52 <UART_SetConfig+0x6e2>
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5c:	40011000 	.word	0x40011000
 8006d60:	40011400 	.word	0x40011400
 8006d64:	51eb851f 	.word	0x51eb851f

08006d68 <__errno>:
 8006d68:	4b01      	ldr	r3, [pc, #4]	; (8006d70 <__errno+0x8>)
 8006d6a:	6818      	ldr	r0, [r3, #0]
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	2000000c 	.word	0x2000000c

08006d74 <__libc_init_array>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4e0d      	ldr	r6, [pc, #52]	; (8006dac <__libc_init_array+0x38>)
 8006d78:	4c0d      	ldr	r4, [pc, #52]	; (8006db0 <__libc_init_array+0x3c>)
 8006d7a:	1ba4      	subs	r4, r4, r6
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	2500      	movs	r5, #0
 8006d80:	42a5      	cmp	r5, r4
 8006d82:	d109      	bne.n	8006d98 <__libc_init_array+0x24>
 8006d84:	4e0b      	ldr	r6, [pc, #44]	; (8006db4 <__libc_init_array+0x40>)
 8006d86:	4c0c      	ldr	r4, [pc, #48]	; (8006db8 <__libc_init_array+0x44>)
 8006d88:	f000 fc26 	bl	80075d8 <_init>
 8006d8c:	1ba4      	subs	r4, r4, r6
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	2500      	movs	r5, #0
 8006d92:	42a5      	cmp	r5, r4
 8006d94:	d105      	bne.n	8006da2 <__libc_init_array+0x2e>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d9c:	4798      	blx	r3
 8006d9e:	3501      	adds	r5, #1
 8006da0:	e7ee      	b.n	8006d80 <__libc_init_array+0xc>
 8006da2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006da6:	4798      	blx	r3
 8006da8:	3501      	adds	r5, #1
 8006daa:	e7f2      	b.n	8006d92 <__libc_init_array+0x1e>
 8006dac:	08007774 	.word	0x08007774
 8006db0:	08007774 	.word	0x08007774
 8006db4:	08007774 	.word	0x08007774
 8006db8:	08007778 	.word	0x08007778

08006dbc <memset>:
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d100      	bne.n	8006dc6 <memset+0xa>
 8006dc4:	4770      	bx	lr
 8006dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dca:	e7f9      	b.n	8006dc0 <memset+0x4>

08006dcc <siprintf>:
 8006dcc:	b40e      	push	{r1, r2, r3}
 8006dce:	b500      	push	{lr}
 8006dd0:	b09c      	sub	sp, #112	; 0x70
 8006dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8006dd4:	9002      	str	r0, [sp, #8]
 8006dd6:	9006      	str	r0, [sp, #24]
 8006dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ddc:	4809      	ldr	r0, [pc, #36]	; (8006e04 <siprintf+0x38>)
 8006dde:	9107      	str	r1, [sp, #28]
 8006de0:	9104      	str	r1, [sp, #16]
 8006de2:	4909      	ldr	r1, [pc, #36]	; (8006e08 <siprintf+0x3c>)
 8006de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de8:	9105      	str	r1, [sp, #20]
 8006dea:	6800      	ldr	r0, [r0, #0]
 8006dec:	9301      	str	r3, [sp, #4]
 8006dee:	a902      	add	r1, sp, #8
 8006df0:	f000 f866 	bl	8006ec0 <_svfiprintf_r>
 8006df4:	9b02      	ldr	r3, [sp, #8]
 8006df6:	2200      	movs	r2, #0
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	b01c      	add	sp, #112	; 0x70
 8006dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e00:	b003      	add	sp, #12
 8006e02:	4770      	bx	lr
 8006e04:	2000000c 	.word	0x2000000c
 8006e08:	ffff0208 	.word	0xffff0208

08006e0c <__ssputs_r>:
 8006e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	688e      	ldr	r6, [r1, #8]
 8006e12:	429e      	cmp	r6, r3
 8006e14:	4682      	mov	sl, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4690      	mov	r8, r2
 8006e1a:	4699      	mov	r9, r3
 8006e1c:	d837      	bhi.n	8006e8e <__ssputs_r+0x82>
 8006e1e:	898a      	ldrh	r2, [r1, #12]
 8006e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e24:	d031      	beq.n	8006e8a <__ssputs_r+0x7e>
 8006e26:	6825      	ldr	r5, [r4, #0]
 8006e28:	6909      	ldr	r1, [r1, #16]
 8006e2a:	1a6f      	subs	r7, r5, r1
 8006e2c:	6965      	ldr	r5, [r4, #20]
 8006e2e:	2302      	movs	r3, #2
 8006e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e34:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e38:	f109 0301 	add.w	r3, r9, #1
 8006e3c:	443b      	add	r3, r7
 8006e3e:	429d      	cmp	r5, r3
 8006e40:	bf38      	it	cc
 8006e42:	461d      	movcc	r5, r3
 8006e44:	0553      	lsls	r3, r2, #21
 8006e46:	d530      	bpl.n	8006eaa <__ssputs_r+0x9e>
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f000 fb2b 	bl	80074a4 <_malloc_r>
 8006e4e:	4606      	mov	r6, r0
 8006e50:	b950      	cbnz	r0, 8006e68 <__ssputs_r+0x5c>
 8006e52:	230c      	movs	r3, #12
 8006e54:	f8ca 3000 	str.w	r3, [sl]
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e5e:	81a3      	strh	r3, [r4, #12]
 8006e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e68:	463a      	mov	r2, r7
 8006e6a:	6921      	ldr	r1, [r4, #16]
 8006e6c:	f000 faa8 	bl	80073c0 <memcpy>
 8006e70:	89a3      	ldrh	r3, [r4, #12]
 8006e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7a:	81a3      	strh	r3, [r4, #12]
 8006e7c:	6126      	str	r6, [r4, #16]
 8006e7e:	6165      	str	r5, [r4, #20]
 8006e80:	443e      	add	r6, r7
 8006e82:	1bed      	subs	r5, r5, r7
 8006e84:	6026      	str	r6, [r4, #0]
 8006e86:	60a5      	str	r5, [r4, #8]
 8006e88:	464e      	mov	r6, r9
 8006e8a:	454e      	cmp	r6, r9
 8006e8c:	d900      	bls.n	8006e90 <__ssputs_r+0x84>
 8006e8e:	464e      	mov	r6, r9
 8006e90:	4632      	mov	r2, r6
 8006e92:	4641      	mov	r1, r8
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	f000 fa9e 	bl	80073d6 <memmove>
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	1b9b      	subs	r3, r3, r6
 8006e9e:	60a3      	str	r3, [r4, #8]
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	441e      	add	r6, r3
 8006ea4:	6026      	str	r6, [r4, #0]
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e7dc      	b.n	8006e64 <__ssputs_r+0x58>
 8006eaa:	462a      	mov	r2, r5
 8006eac:	f000 fb54 	bl	8007558 <_realloc_r>
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d1e2      	bne.n	8006e7c <__ssputs_r+0x70>
 8006eb6:	6921      	ldr	r1, [r4, #16]
 8006eb8:	4650      	mov	r0, sl
 8006eba:	f000 faa5 	bl	8007408 <_free_r>
 8006ebe:	e7c8      	b.n	8006e52 <__ssputs_r+0x46>

08006ec0 <_svfiprintf_r>:
 8006ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	461d      	mov	r5, r3
 8006ec6:	898b      	ldrh	r3, [r1, #12]
 8006ec8:	061f      	lsls	r7, r3, #24
 8006eca:	b09d      	sub	sp, #116	; 0x74
 8006ecc:	4680      	mov	r8, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	4616      	mov	r6, r2
 8006ed2:	d50f      	bpl.n	8006ef4 <_svfiprintf_r+0x34>
 8006ed4:	690b      	ldr	r3, [r1, #16]
 8006ed6:	b96b      	cbnz	r3, 8006ef4 <_svfiprintf_r+0x34>
 8006ed8:	2140      	movs	r1, #64	; 0x40
 8006eda:	f000 fae3 	bl	80074a4 <_malloc_r>
 8006ede:	6020      	str	r0, [r4, #0]
 8006ee0:	6120      	str	r0, [r4, #16]
 8006ee2:	b928      	cbnz	r0, 8006ef0 <_svfiprintf_r+0x30>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	f8c8 3000 	str.w	r3, [r8]
 8006eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eee:	e0c8      	b.n	8007082 <_svfiprintf_r+0x1c2>
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	6163      	str	r3, [r4, #20]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef8:	2320      	movs	r3, #32
 8006efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006efe:	2330      	movs	r3, #48	; 0x30
 8006f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f04:	9503      	str	r5, [sp, #12]
 8006f06:	f04f 0b01 	mov.w	fp, #1
 8006f0a:	4637      	mov	r7, r6
 8006f0c:	463d      	mov	r5, r7
 8006f0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006f12:	b10b      	cbz	r3, 8006f18 <_svfiprintf_r+0x58>
 8006f14:	2b25      	cmp	r3, #37	; 0x25
 8006f16:	d13e      	bne.n	8006f96 <_svfiprintf_r+0xd6>
 8006f18:	ebb7 0a06 	subs.w	sl, r7, r6
 8006f1c:	d00b      	beq.n	8006f36 <_svfiprintf_r+0x76>
 8006f1e:	4653      	mov	r3, sl
 8006f20:	4632      	mov	r2, r6
 8006f22:	4621      	mov	r1, r4
 8006f24:	4640      	mov	r0, r8
 8006f26:	f7ff ff71 	bl	8006e0c <__ssputs_r>
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	f000 80a4 	beq.w	8007078 <_svfiprintf_r+0x1b8>
 8006f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f32:	4453      	add	r3, sl
 8006f34:	9309      	str	r3, [sp, #36]	; 0x24
 8006f36:	783b      	ldrb	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 809d 	beq.w	8007078 <_svfiprintf_r+0x1b8>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f48:	9304      	str	r3, [sp, #16]
 8006f4a:	9307      	str	r3, [sp, #28]
 8006f4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f50:	931a      	str	r3, [sp, #104]	; 0x68
 8006f52:	462f      	mov	r7, r5
 8006f54:	2205      	movs	r2, #5
 8006f56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f5a:	4850      	ldr	r0, [pc, #320]	; (800709c <_svfiprintf_r+0x1dc>)
 8006f5c:	f7fd f938 	bl	80041d0 <memchr>
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	b9d0      	cbnz	r0, 8006f9a <_svfiprintf_r+0xda>
 8006f64:	06d9      	lsls	r1, r3, #27
 8006f66:	bf44      	itt	mi
 8006f68:	2220      	movmi	r2, #32
 8006f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f6e:	071a      	lsls	r2, r3, #28
 8006f70:	bf44      	itt	mi
 8006f72:	222b      	movmi	r2, #43	; 0x2b
 8006f74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f78:	782a      	ldrb	r2, [r5, #0]
 8006f7a:	2a2a      	cmp	r2, #42	; 0x2a
 8006f7c:	d015      	beq.n	8006faa <_svfiprintf_r+0xea>
 8006f7e:	9a07      	ldr	r2, [sp, #28]
 8006f80:	462f      	mov	r7, r5
 8006f82:	2000      	movs	r0, #0
 8006f84:	250a      	movs	r5, #10
 8006f86:	4639      	mov	r1, r7
 8006f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f8c:	3b30      	subs	r3, #48	; 0x30
 8006f8e:	2b09      	cmp	r3, #9
 8006f90:	d94d      	bls.n	800702e <_svfiprintf_r+0x16e>
 8006f92:	b1b8      	cbz	r0, 8006fc4 <_svfiprintf_r+0x104>
 8006f94:	e00f      	b.n	8006fb6 <_svfiprintf_r+0xf6>
 8006f96:	462f      	mov	r7, r5
 8006f98:	e7b8      	b.n	8006f0c <_svfiprintf_r+0x4c>
 8006f9a:	4a40      	ldr	r2, [pc, #256]	; (800709c <_svfiprintf_r+0x1dc>)
 8006f9c:	1a80      	subs	r0, r0, r2
 8006f9e:	fa0b f000 	lsl.w	r0, fp, r0
 8006fa2:	4318      	orrs	r0, r3
 8006fa4:	9004      	str	r0, [sp, #16]
 8006fa6:	463d      	mov	r5, r7
 8006fa8:	e7d3      	b.n	8006f52 <_svfiprintf_r+0x92>
 8006faa:	9a03      	ldr	r2, [sp, #12]
 8006fac:	1d11      	adds	r1, r2, #4
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	9103      	str	r1, [sp, #12]
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	db01      	blt.n	8006fba <_svfiprintf_r+0xfa>
 8006fb6:	9207      	str	r2, [sp, #28]
 8006fb8:	e004      	b.n	8006fc4 <_svfiprintf_r+0x104>
 8006fba:	4252      	negs	r2, r2
 8006fbc:	f043 0302 	orr.w	r3, r3, #2
 8006fc0:	9207      	str	r2, [sp, #28]
 8006fc2:	9304      	str	r3, [sp, #16]
 8006fc4:	783b      	ldrb	r3, [r7, #0]
 8006fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc8:	d10c      	bne.n	8006fe4 <_svfiprintf_r+0x124>
 8006fca:	787b      	ldrb	r3, [r7, #1]
 8006fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8006fce:	d133      	bne.n	8007038 <_svfiprintf_r+0x178>
 8006fd0:	9b03      	ldr	r3, [sp, #12]
 8006fd2:	1d1a      	adds	r2, r3, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	9203      	str	r2, [sp, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfb8      	it	lt
 8006fdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006fe0:	3702      	adds	r7, #2
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	4d2e      	ldr	r5, [pc, #184]	; (80070a0 <_svfiprintf_r+0x1e0>)
 8006fe6:	7839      	ldrb	r1, [r7, #0]
 8006fe8:	2203      	movs	r2, #3
 8006fea:	4628      	mov	r0, r5
 8006fec:	f7fd f8f0 	bl	80041d0 <memchr>
 8006ff0:	b138      	cbz	r0, 8007002 <_svfiprintf_r+0x142>
 8006ff2:	2340      	movs	r3, #64	; 0x40
 8006ff4:	1b40      	subs	r0, r0, r5
 8006ff6:	fa03 f000 	lsl.w	r0, r3, r0
 8006ffa:	9b04      	ldr	r3, [sp, #16]
 8006ffc:	4303      	orrs	r3, r0
 8006ffe:	3701      	adds	r7, #1
 8007000:	9304      	str	r3, [sp, #16]
 8007002:	7839      	ldrb	r1, [r7, #0]
 8007004:	4827      	ldr	r0, [pc, #156]	; (80070a4 <_svfiprintf_r+0x1e4>)
 8007006:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800700a:	2206      	movs	r2, #6
 800700c:	1c7e      	adds	r6, r7, #1
 800700e:	f7fd f8df 	bl	80041d0 <memchr>
 8007012:	2800      	cmp	r0, #0
 8007014:	d038      	beq.n	8007088 <_svfiprintf_r+0x1c8>
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <_svfiprintf_r+0x1e8>)
 8007018:	bb13      	cbnz	r3, 8007060 <_svfiprintf_r+0x1a0>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	3307      	adds	r3, #7
 800701e:	f023 0307 	bic.w	r3, r3, #7
 8007022:	3308      	adds	r3, #8
 8007024:	9303      	str	r3, [sp, #12]
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	444b      	add	r3, r9
 800702a:	9309      	str	r3, [sp, #36]	; 0x24
 800702c:	e76d      	b.n	8006f0a <_svfiprintf_r+0x4a>
 800702e:	fb05 3202 	mla	r2, r5, r2, r3
 8007032:	2001      	movs	r0, #1
 8007034:	460f      	mov	r7, r1
 8007036:	e7a6      	b.n	8006f86 <_svfiprintf_r+0xc6>
 8007038:	2300      	movs	r3, #0
 800703a:	3701      	adds	r7, #1
 800703c:	9305      	str	r3, [sp, #20]
 800703e:	4619      	mov	r1, r3
 8007040:	250a      	movs	r5, #10
 8007042:	4638      	mov	r0, r7
 8007044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007048:	3a30      	subs	r2, #48	; 0x30
 800704a:	2a09      	cmp	r2, #9
 800704c:	d903      	bls.n	8007056 <_svfiprintf_r+0x196>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d0c8      	beq.n	8006fe4 <_svfiprintf_r+0x124>
 8007052:	9105      	str	r1, [sp, #20]
 8007054:	e7c6      	b.n	8006fe4 <_svfiprintf_r+0x124>
 8007056:	fb05 2101 	mla	r1, r5, r1, r2
 800705a:	2301      	movs	r3, #1
 800705c:	4607      	mov	r7, r0
 800705e:	e7f0      	b.n	8007042 <_svfiprintf_r+0x182>
 8007060:	ab03      	add	r3, sp, #12
 8007062:	9300      	str	r3, [sp, #0]
 8007064:	4622      	mov	r2, r4
 8007066:	4b11      	ldr	r3, [pc, #68]	; (80070ac <_svfiprintf_r+0x1ec>)
 8007068:	a904      	add	r1, sp, #16
 800706a:	4640      	mov	r0, r8
 800706c:	f3af 8000 	nop.w
 8007070:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007074:	4681      	mov	r9, r0
 8007076:	d1d6      	bne.n	8007026 <_svfiprintf_r+0x166>
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	065b      	lsls	r3, r3, #25
 800707c:	f53f af35 	bmi.w	8006eea <_svfiprintf_r+0x2a>
 8007080:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007082:	b01d      	add	sp, #116	; 0x74
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007088:	ab03      	add	r3, sp, #12
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	4622      	mov	r2, r4
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <_svfiprintf_r+0x1ec>)
 8007090:	a904      	add	r1, sp, #16
 8007092:	4640      	mov	r0, r8
 8007094:	f000 f882 	bl	800719c <_printf_i>
 8007098:	e7ea      	b.n	8007070 <_svfiprintf_r+0x1b0>
 800709a:	bf00      	nop
 800709c:	08007738 	.word	0x08007738
 80070a0:	0800773e 	.word	0x0800773e
 80070a4:	08007742 	.word	0x08007742
 80070a8:	00000000 	.word	0x00000000
 80070ac:	08006e0d 	.word	0x08006e0d

080070b0 <_printf_common>:
 80070b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b4:	4691      	mov	r9, r2
 80070b6:	461f      	mov	r7, r3
 80070b8:	688a      	ldr	r2, [r1, #8]
 80070ba:	690b      	ldr	r3, [r1, #16]
 80070bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c0:	4293      	cmp	r3, r2
 80070c2:	bfb8      	it	lt
 80070c4:	4613      	movlt	r3, r2
 80070c6:	f8c9 3000 	str.w	r3, [r9]
 80070ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070ce:	4606      	mov	r6, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	b112      	cbz	r2, 80070da <_printf_common+0x2a>
 80070d4:	3301      	adds	r3, #1
 80070d6:	f8c9 3000 	str.w	r3, [r9]
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	0699      	lsls	r1, r3, #26
 80070de:	bf42      	ittt	mi
 80070e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070e4:	3302      	addmi	r3, #2
 80070e6:	f8c9 3000 	strmi.w	r3, [r9]
 80070ea:	6825      	ldr	r5, [r4, #0]
 80070ec:	f015 0506 	ands.w	r5, r5, #6
 80070f0:	d107      	bne.n	8007102 <_printf_common+0x52>
 80070f2:	f104 0a19 	add.w	sl, r4, #25
 80070f6:	68e3      	ldr	r3, [r4, #12]
 80070f8:	f8d9 2000 	ldr.w	r2, [r9]
 80070fc:	1a9b      	subs	r3, r3, r2
 80070fe:	42ab      	cmp	r3, r5
 8007100:	dc28      	bgt.n	8007154 <_printf_common+0xa4>
 8007102:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007106:	6822      	ldr	r2, [r4, #0]
 8007108:	3300      	adds	r3, #0
 800710a:	bf18      	it	ne
 800710c:	2301      	movne	r3, #1
 800710e:	0692      	lsls	r2, r2, #26
 8007110:	d42d      	bmi.n	800716e <_printf_common+0xbe>
 8007112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007116:	4639      	mov	r1, r7
 8007118:	4630      	mov	r0, r6
 800711a:	47c0      	blx	r8
 800711c:	3001      	adds	r0, #1
 800711e:	d020      	beq.n	8007162 <_printf_common+0xb2>
 8007120:	6823      	ldr	r3, [r4, #0]
 8007122:	68e5      	ldr	r5, [r4, #12]
 8007124:	f8d9 2000 	ldr.w	r2, [r9]
 8007128:	f003 0306 	and.w	r3, r3, #6
 800712c:	2b04      	cmp	r3, #4
 800712e:	bf08      	it	eq
 8007130:	1aad      	subeq	r5, r5, r2
 8007132:	68a3      	ldr	r3, [r4, #8]
 8007134:	6922      	ldr	r2, [r4, #16]
 8007136:	bf0c      	ite	eq
 8007138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800713c:	2500      	movne	r5, #0
 800713e:	4293      	cmp	r3, r2
 8007140:	bfc4      	itt	gt
 8007142:	1a9b      	subgt	r3, r3, r2
 8007144:	18ed      	addgt	r5, r5, r3
 8007146:	f04f 0900 	mov.w	r9, #0
 800714a:	341a      	adds	r4, #26
 800714c:	454d      	cmp	r5, r9
 800714e:	d11a      	bne.n	8007186 <_printf_common+0xd6>
 8007150:	2000      	movs	r0, #0
 8007152:	e008      	b.n	8007166 <_printf_common+0xb6>
 8007154:	2301      	movs	r3, #1
 8007156:	4652      	mov	r2, sl
 8007158:	4639      	mov	r1, r7
 800715a:	4630      	mov	r0, r6
 800715c:	47c0      	blx	r8
 800715e:	3001      	adds	r0, #1
 8007160:	d103      	bne.n	800716a <_printf_common+0xba>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716a:	3501      	adds	r5, #1
 800716c:	e7c3      	b.n	80070f6 <_printf_common+0x46>
 800716e:	18e1      	adds	r1, r4, r3
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	2030      	movs	r0, #48	; 0x30
 8007174:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007178:	4422      	add	r2, r4
 800717a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800717e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007182:	3302      	adds	r3, #2
 8007184:	e7c5      	b.n	8007112 <_printf_common+0x62>
 8007186:	2301      	movs	r3, #1
 8007188:	4622      	mov	r2, r4
 800718a:	4639      	mov	r1, r7
 800718c:	4630      	mov	r0, r6
 800718e:	47c0      	blx	r8
 8007190:	3001      	adds	r0, #1
 8007192:	d0e6      	beq.n	8007162 <_printf_common+0xb2>
 8007194:	f109 0901 	add.w	r9, r9, #1
 8007198:	e7d8      	b.n	800714c <_printf_common+0x9c>
	...

0800719c <_printf_i>:
 800719c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80071a4:	460c      	mov	r4, r1
 80071a6:	7e09      	ldrb	r1, [r1, #24]
 80071a8:	b085      	sub	sp, #20
 80071aa:	296e      	cmp	r1, #110	; 0x6e
 80071ac:	4617      	mov	r7, r2
 80071ae:	4606      	mov	r6, r0
 80071b0:	4698      	mov	r8, r3
 80071b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071b4:	f000 80b3 	beq.w	800731e <_printf_i+0x182>
 80071b8:	d822      	bhi.n	8007200 <_printf_i+0x64>
 80071ba:	2963      	cmp	r1, #99	; 0x63
 80071bc:	d036      	beq.n	800722c <_printf_i+0x90>
 80071be:	d80a      	bhi.n	80071d6 <_printf_i+0x3a>
 80071c0:	2900      	cmp	r1, #0
 80071c2:	f000 80b9 	beq.w	8007338 <_printf_i+0x19c>
 80071c6:	2958      	cmp	r1, #88	; 0x58
 80071c8:	f000 8083 	beq.w	80072d2 <_printf_i+0x136>
 80071cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071d4:	e032      	b.n	800723c <_printf_i+0xa0>
 80071d6:	2964      	cmp	r1, #100	; 0x64
 80071d8:	d001      	beq.n	80071de <_printf_i+0x42>
 80071da:	2969      	cmp	r1, #105	; 0x69
 80071dc:	d1f6      	bne.n	80071cc <_printf_i+0x30>
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	6813      	ldr	r3, [r2, #0]
 80071e2:	0605      	lsls	r5, r0, #24
 80071e4:	f103 0104 	add.w	r1, r3, #4
 80071e8:	d52a      	bpl.n	8007240 <_printf_i+0xa4>
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6011      	str	r1, [r2, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	da03      	bge.n	80071fa <_printf_i+0x5e>
 80071f2:	222d      	movs	r2, #45	; 0x2d
 80071f4:	425b      	negs	r3, r3
 80071f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071fa:	486f      	ldr	r0, [pc, #444]	; (80073b8 <_printf_i+0x21c>)
 80071fc:	220a      	movs	r2, #10
 80071fe:	e039      	b.n	8007274 <_printf_i+0xd8>
 8007200:	2973      	cmp	r1, #115	; 0x73
 8007202:	f000 809d 	beq.w	8007340 <_printf_i+0x1a4>
 8007206:	d808      	bhi.n	800721a <_printf_i+0x7e>
 8007208:	296f      	cmp	r1, #111	; 0x6f
 800720a:	d020      	beq.n	800724e <_printf_i+0xb2>
 800720c:	2970      	cmp	r1, #112	; 0x70
 800720e:	d1dd      	bne.n	80071cc <_printf_i+0x30>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	f043 0320 	orr.w	r3, r3, #32
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	e003      	b.n	8007222 <_printf_i+0x86>
 800721a:	2975      	cmp	r1, #117	; 0x75
 800721c:	d017      	beq.n	800724e <_printf_i+0xb2>
 800721e:	2978      	cmp	r1, #120	; 0x78
 8007220:	d1d4      	bne.n	80071cc <_printf_i+0x30>
 8007222:	2378      	movs	r3, #120	; 0x78
 8007224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007228:	4864      	ldr	r0, [pc, #400]	; (80073bc <_printf_i+0x220>)
 800722a:	e055      	b.n	80072d8 <_printf_i+0x13c>
 800722c:	6813      	ldr	r3, [r2, #0]
 800722e:	1d19      	adds	r1, r3, #4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6011      	str	r1, [r2, #0]
 8007234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800723c:	2301      	movs	r3, #1
 800723e:	e08c      	b.n	800735a <_printf_i+0x1be>
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6011      	str	r1, [r2, #0]
 8007244:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007248:	bf18      	it	ne
 800724a:	b21b      	sxthne	r3, r3
 800724c:	e7cf      	b.n	80071ee <_printf_i+0x52>
 800724e:	6813      	ldr	r3, [r2, #0]
 8007250:	6825      	ldr	r5, [r4, #0]
 8007252:	1d18      	adds	r0, r3, #4
 8007254:	6010      	str	r0, [r2, #0]
 8007256:	0628      	lsls	r0, r5, #24
 8007258:	d501      	bpl.n	800725e <_printf_i+0xc2>
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	e002      	b.n	8007264 <_printf_i+0xc8>
 800725e:	0668      	lsls	r0, r5, #25
 8007260:	d5fb      	bpl.n	800725a <_printf_i+0xbe>
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	4854      	ldr	r0, [pc, #336]	; (80073b8 <_printf_i+0x21c>)
 8007266:	296f      	cmp	r1, #111	; 0x6f
 8007268:	bf14      	ite	ne
 800726a:	220a      	movne	r2, #10
 800726c:	2208      	moveq	r2, #8
 800726e:	2100      	movs	r1, #0
 8007270:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007274:	6865      	ldr	r5, [r4, #4]
 8007276:	60a5      	str	r5, [r4, #8]
 8007278:	2d00      	cmp	r5, #0
 800727a:	f2c0 8095 	blt.w	80073a8 <_printf_i+0x20c>
 800727e:	6821      	ldr	r1, [r4, #0]
 8007280:	f021 0104 	bic.w	r1, r1, #4
 8007284:	6021      	str	r1, [r4, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d13d      	bne.n	8007306 <_printf_i+0x16a>
 800728a:	2d00      	cmp	r5, #0
 800728c:	f040 808e 	bne.w	80073ac <_printf_i+0x210>
 8007290:	4665      	mov	r5, ip
 8007292:	2a08      	cmp	r2, #8
 8007294:	d10b      	bne.n	80072ae <_printf_i+0x112>
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	07db      	lsls	r3, r3, #31
 800729a:	d508      	bpl.n	80072ae <_printf_i+0x112>
 800729c:	6923      	ldr	r3, [r4, #16]
 800729e:	6862      	ldr	r2, [r4, #4]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	bfde      	ittt	le
 80072a4:	2330      	movle	r3, #48	; 0x30
 80072a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80072ae:	ebac 0305 	sub.w	r3, ip, r5
 80072b2:	6123      	str	r3, [r4, #16]
 80072b4:	f8cd 8000 	str.w	r8, [sp]
 80072b8:	463b      	mov	r3, r7
 80072ba:	aa03      	add	r2, sp, #12
 80072bc:	4621      	mov	r1, r4
 80072be:	4630      	mov	r0, r6
 80072c0:	f7ff fef6 	bl	80070b0 <_printf_common>
 80072c4:	3001      	adds	r0, #1
 80072c6:	d14d      	bne.n	8007364 <_printf_i+0x1c8>
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072cc:	b005      	add	sp, #20
 80072ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072d2:	4839      	ldr	r0, [pc, #228]	; (80073b8 <_printf_i+0x21c>)
 80072d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072d8:	6813      	ldr	r3, [r2, #0]
 80072da:	6821      	ldr	r1, [r4, #0]
 80072dc:	1d1d      	adds	r5, r3, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6015      	str	r5, [r2, #0]
 80072e2:	060a      	lsls	r2, r1, #24
 80072e4:	d50b      	bpl.n	80072fe <_printf_i+0x162>
 80072e6:	07ca      	lsls	r2, r1, #31
 80072e8:	bf44      	itt	mi
 80072ea:	f041 0120 	orrmi.w	r1, r1, #32
 80072ee:	6021      	strmi	r1, [r4, #0]
 80072f0:	b91b      	cbnz	r3, 80072fa <_printf_i+0x15e>
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	f022 0220 	bic.w	r2, r2, #32
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	2210      	movs	r2, #16
 80072fc:	e7b7      	b.n	800726e <_printf_i+0xd2>
 80072fe:	064d      	lsls	r5, r1, #25
 8007300:	bf48      	it	mi
 8007302:	b29b      	uxthmi	r3, r3
 8007304:	e7ef      	b.n	80072e6 <_printf_i+0x14a>
 8007306:	4665      	mov	r5, ip
 8007308:	fbb3 f1f2 	udiv	r1, r3, r2
 800730c:	fb02 3311 	mls	r3, r2, r1, r3
 8007310:	5cc3      	ldrb	r3, [r0, r3]
 8007312:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007316:	460b      	mov	r3, r1
 8007318:	2900      	cmp	r1, #0
 800731a:	d1f5      	bne.n	8007308 <_printf_i+0x16c>
 800731c:	e7b9      	b.n	8007292 <_printf_i+0xf6>
 800731e:	6813      	ldr	r3, [r2, #0]
 8007320:	6825      	ldr	r5, [r4, #0]
 8007322:	6961      	ldr	r1, [r4, #20]
 8007324:	1d18      	adds	r0, r3, #4
 8007326:	6010      	str	r0, [r2, #0]
 8007328:	0628      	lsls	r0, r5, #24
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	d501      	bpl.n	8007332 <_printf_i+0x196>
 800732e:	6019      	str	r1, [r3, #0]
 8007330:	e002      	b.n	8007338 <_printf_i+0x19c>
 8007332:	066a      	lsls	r2, r5, #25
 8007334:	d5fb      	bpl.n	800732e <_printf_i+0x192>
 8007336:	8019      	strh	r1, [r3, #0]
 8007338:	2300      	movs	r3, #0
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	4665      	mov	r5, ip
 800733e:	e7b9      	b.n	80072b4 <_printf_i+0x118>
 8007340:	6813      	ldr	r3, [r2, #0]
 8007342:	1d19      	adds	r1, r3, #4
 8007344:	6011      	str	r1, [r2, #0]
 8007346:	681d      	ldr	r5, [r3, #0]
 8007348:	6862      	ldr	r2, [r4, #4]
 800734a:	2100      	movs	r1, #0
 800734c:	4628      	mov	r0, r5
 800734e:	f7fc ff3f 	bl	80041d0 <memchr>
 8007352:	b108      	cbz	r0, 8007358 <_printf_i+0x1bc>
 8007354:	1b40      	subs	r0, r0, r5
 8007356:	6060      	str	r0, [r4, #4]
 8007358:	6863      	ldr	r3, [r4, #4]
 800735a:	6123      	str	r3, [r4, #16]
 800735c:	2300      	movs	r3, #0
 800735e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007362:	e7a7      	b.n	80072b4 <_printf_i+0x118>
 8007364:	6923      	ldr	r3, [r4, #16]
 8007366:	462a      	mov	r2, r5
 8007368:	4639      	mov	r1, r7
 800736a:	4630      	mov	r0, r6
 800736c:	47c0      	blx	r8
 800736e:	3001      	adds	r0, #1
 8007370:	d0aa      	beq.n	80072c8 <_printf_i+0x12c>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	079b      	lsls	r3, r3, #30
 8007376:	d413      	bmi.n	80073a0 <_printf_i+0x204>
 8007378:	68e0      	ldr	r0, [r4, #12]
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	4298      	cmp	r0, r3
 800737e:	bfb8      	it	lt
 8007380:	4618      	movlt	r0, r3
 8007382:	e7a3      	b.n	80072cc <_printf_i+0x130>
 8007384:	2301      	movs	r3, #1
 8007386:	464a      	mov	r2, r9
 8007388:	4639      	mov	r1, r7
 800738a:	4630      	mov	r0, r6
 800738c:	47c0      	blx	r8
 800738e:	3001      	adds	r0, #1
 8007390:	d09a      	beq.n	80072c8 <_printf_i+0x12c>
 8007392:	3501      	adds	r5, #1
 8007394:	68e3      	ldr	r3, [r4, #12]
 8007396:	9a03      	ldr	r2, [sp, #12]
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	42ab      	cmp	r3, r5
 800739c:	dcf2      	bgt.n	8007384 <_printf_i+0x1e8>
 800739e:	e7eb      	b.n	8007378 <_printf_i+0x1dc>
 80073a0:	2500      	movs	r5, #0
 80073a2:	f104 0919 	add.w	r9, r4, #25
 80073a6:	e7f5      	b.n	8007394 <_printf_i+0x1f8>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1ac      	bne.n	8007306 <_printf_i+0x16a>
 80073ac:	7803      	ldrb	r3, [r0, #0]
 80073ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073b6:	e76c      	b.n	8007292 <_printf_i+0xf6>
 80073b8:	08007749 	.word	0x08007749
 80073bc:	0800775a 	.word	0x0800775a

080073c0 <memcpy>:
 80073c0:	b510      	push	{r4, lr}
 80073c2:	1e43      	subs	r3, r0, #1
 80073c4:	440a      	add	r2, r1
 80073c6:	4291      	cmp	r1, r2
 80073c8:	d100      	bne.n	80073cc <memcpy+0xc>
 80073ca:	bd10      	pop	{r4, pc}
 80073cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d4:	e7f7      	b.n	80073c6 <memcpy+0x6>

080073d6 <memmove>:
 80073d6:	4288      	cmp	r0, r1
 80073d8:	b510      	push	{r4, lr}
 80073da:	eb01 0302 	add.w	r3, r1, r2
 80073de:	d807      	bhi.n	80073f0 <memmove+0x1a>
 80073e0:	1e42      	subs	r2, r0, #1
 80073e2:	4299      	cmp	r1, r3
 80073e4:	d00a      	beq.n	80073fc <memmove+0x26>
 80073e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ea:	f802 4f01 	strb.w	r4, [r2, #1]!
 80073ee:	e7f8      	b.n	80073e2 <memmove+0xc>
 80073f0:	4283      	cmp	r3, r0
 80073f2:	d9f5      	bls.n	80073e0 <memmove+0xa>
 80073f4:	1881      	adds	r1, r0, r2
 80073f6:	1ad2      	subs	r2, r2, r3
 80073f8:	42d3      	cmn	r3, r2
 80073fa:	d100      	bne.n	80073fe <memmove+0x28>
 80073fc:	bd10      	pop	{r4, pc}
 80073fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007402:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007406:	e7f7      	b.n	80073f8 <memmove+0x22>

08007408 <_free_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4605      	mov	r5, r0
 800740c:	2900      	cmp	r1, #0
 800740e:	d045      	beq.n	800749c <_free_r+0x94>
 8007410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007414:	1f0c      	subs	r4, r1, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	bfb8      	it	lt
 800741a:	18e4      	addlt	r4, r4, r3
 800741c:	f000 f8d2 	bl	80075c4 <__malloc_lock>
 8007420:	4a1f      	ldr	r2, [pc, #124]	; (80074a0 <_free_r+0x98>)
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	4610      	mov	r0, r2
 8007426:	b933      	cbnz	r3, 8007436 <_free_r+0x2e>
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	6014      	str	r4, [r2, #0]
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 b8c8 	b.w	80075c6 <__malloc_unlock>
 8007436:	42a3      	cmp	r3, r4
 8007438:	d90c      	bls.n	8007454 <_free_r+0x4c>
 800743a:	6821      	ldr	r1, [r4, #0]
 800743c:	1862      	adds	r2, r4, r1
 800743e:	4293      	cmp	r3, r2
 8007440:	bf04      	itt	eq
 8007442:	681a      	ldreq	r2, [r3, #0]
 8007444:	685b      	ldreq	r3, [r3, #4]
 8007446:	6063      	str	r3, [r4, #4]
 8007448:	bf04      	itt	eq
 800744a:	1852      	addeq	r2, r2, r1
 800744c:	6022      	streq	r2, [r4, #0]
 800744e:	6004      	str	r4, [r0, #0]
 8007450:	e7ec      	b.n	800742c <_free_r+0x24>
 8007452:	4613      	mov	r3, r2
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	b10a      	cbz	r2, 800745c <_free_r+0x54>
 8007458:	42a2      	cmp	r2, r4
 800745a:	d9fa      	bls.n	8007452 <_free_r+0x4a>
 800745c:	6819      	ldr	r1, [r3, #0]
 800745e:	1858      	adds	r0, r3, r1
 8007460:	42a0      	cmp	r0, r4
 8007462:	d10b      	bne.n	800747c <_free_r+0x74>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	4401      	add	r1, r0
 8007468:	1858      	adds	r0, r3, r1
 800746a:	4282      	cmp	r2, r0
 800746c:	6019      	str	r1, [r3, #0]
 800746e:	d1dd      	bne.n	800742c <_free_r+0x24>
 8007470:	6810      	ldr	r0, [r2, #0]
 8007472:	6852      	ldr	r2, [r2, #4]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	4401      	add	r1, r0
 8007478:	6019      	str	r1, [r3, #0]
 800747a:	e7d7      	b.n	800742c <_free_r+0x24>
 800747c:	d902      	bls.n	8007484 <_free_r+0x7c>
 800747e:	230c      	movs	r3, #12
 8007480:	602b      	str	r3, [r5, #0]
 8007482:	e7d3      	b.n	800742c <_free_r+0x24>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	1821      	adds	r1, r4, r0
 8007488:	428a      	cmp	r2, r1
 800748a:	bf04      	itt	eq
 800748c:	6811      	ldreq	r1, [r2, #0]
 800748e:	6852      	ldreq	r2, [r2, #4]
 8007490:	6062      	str	r2, [r4, #4]
 8007492:	bf04      	itt	eq
 8007494:	1809      	addeq	r1, r1, r0
 8007496:	6021      	streq	r1, [r4, #0]
 8007498:	605c      	str	r4, [r3, #4]
 800749a:	e7c7      	b.n	800742c <_free_r+0x24>
 800749c:	bd38      	pop	{r3, r4, r5, pc}
 800749e:	bf00      	nop
 80074a0:	200000a0 	.word	0x200000a0

080074a4 <_malloc_r>:
 80074a4:	b570      	push	{r4, r5, r6, lr}
 80074a6:	1ccd      	adds	r5, r1, #3
 80074a8:	f025 0503 	bic.w	r5, r5, #3
 80074ac:	3508      	adds	r5, #8
 80074ae:	2d0c      	cmp	r5, #12
 80074b0:	bf38      	it	cc
 80074b2:	250c      	movcc	r5, #12
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	4606      	mov	r6, r0
 80074b8:	db01      	blt.n	80074be <_malloc_r+0x1a>
 80074ba:	42a9      	cmp	r1, r5
 80074bc:	d903      	bls.n	80074c6 <_malloc_r+0x22>
 80074be:	230c      	movs	r3, #12
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	2000      	movs	r0, #0
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	f000 f87d 	bl	80075c4 <__malloc_lock>
 80074ca:	4a21      	ldr	r2, [pc, #132]	; (8007550 <_malloc_r+0xac>)
 80074cc:	6814      	ldr	r4, [r2, #0]
 80074ce:	4621      	mov	r1, r4
 80074d0:	b991      	cbnz	r1, 80074f8 <_malloc_r+0x54>
 80074d2:	4c20      	ldr	r4, [pc, #128]	; (8007554 <_malloc_r+0xb0>)
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	b91b      	cbnz	r3, 80074e0 <_malloc_r+0x3c>
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 f863 	bl	80075a4 <_sbrk_r>
 80074de:	6020      	str	r0, [r4, #0]
 80074e0:	4629      	mov	r1, r5
 80074e2:	4630      	mov	r0, r6
 80074e4:	f000 f85e 	bl	80075a4 <_sbrk_r>
 80074e8:	1c43      	adds	r3, r0, #1
 80074ea:	d124      	bne.n	8007536 <_malloc_r+0x92>
 80074ec:	230c      	movs	r3, #12
 80074ee:	6033      	str	r3, [r6, #0]
 80074f0:	4630      	mov	r0, r6
 80074f2:	f000 f868 	bl	80075c6 <__malloc_unlock>
 80074f6:	e7e4      	b.n	80074c2 <_malloc_r+0x1e>
 80074f8:	680b      	ldr	r3, [r1, #0]
 80074fa:	1b5b      	subs	r3, r3, r5
 80074fc:	d418      	bmi.n	8007530 <_malloc_r+0x8c>
 80074fe:	2b0b      	cmp	r3, #11
 8007500:	d90f      	bls.n	8007522 <_malloc_r+0x7e>
 8007502:	600b      	str	r3, [r1, #0]
 8007504:	50cd      	str	r5, [r1, r3]
 8007506:	18cc      	adds	r4, r1, r3
 8007508:	4630      	mov	r0, r6
 800750a:	f000 f85c 	bl	80075c6 <__malloc_unlock>
 800750e:	f104 000b 	add.w	r0, r4, #11
 8007512:	1d23      	adds	r3, r4, #4
 8007514:	f020 0007 	bic.w	r0, r0, #7
 8007518:	1ac3      	subs	r3, r0, r3
 800751a:	d0d3      	beq.n	80074c4 <_malloc_r+0x20>
 800751c:	425a      	negs	r2, r3
 800751e:	50e2      	str	r2, [r4, r3]
 8007520:	e7d0      	b.n	80074c4 <_malloc_r+0x20>
 8007522:	428c      	cmp	r4, r1
 8007524:	684b      	ldr	r3, [r1, #4]
 8007526:	bf16      	itet	ne
 8007528:	6063      	strne	r3, [r4, #4]
 800752a:	6013      	streq	r3, [r2, #0]
 800752c:	460c      	movne	r4, r1
 800752e:	e7eb      	b.n	8007508 <_malloc_r+0x64>
 8007530:	460c      	mov	r4, r1
 8007532:	6849      	ldr	r1, [r1, #4]
 8007534:	e7cc      	b.n	80074d0 <_malloc_r+0x2c>
 8007536:	1cc4      	adds	r4, r0, #3
 8007538:	f024 0403 	bic.w	r4, r4, #3
 800753c:	42a0      	cmp	r0, r4
 800753e:	d005      	beq.n	800754c <_malloc_r+0xa8>
 8007540:	1a21      	subs	r1, r4, r0
 8007542:	4630      	mov	r0, r6
 8007544:	f000 f82e 	bl	80075a4 <_sbrk_r>
 8007548:	3001      	adds	r0, #1
 800754a:	d0cf      	beq.n	80074ec <_malloc_r+0x48>
 800754c:	6025      	str	r5, [r4, #0]
 800754e:	e7db      	b.n	8007508 <_malloc_r+0x64>
 8007550:	200000a0 	.word	0x200000a0
 8007554:	200000a4 	.word	0x200000a4

08007558 <_realloc_r>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	4607      	mov	r7, r0
 800755c:	4614      	mov	r4, r2
 800755e:	460e      	mov	r6, r1
 8007560:	b921      	cbnz	r1, 800756c <_realloc_r+0x14>
 8007562:	4611      	mov	r1, r2
 8007564:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007568:	f7ff bf9c 	b.w	80074a4 <_malloc_r>
 800756c:	b922      	cbnz	r2, 8007578 <_realloc_r+0x20>
 800756e:	f7ff ff4b 	bl	8007408 <_free_r>
 8007572:	4625      	mov	r5, r4
 8007574:	4628      	mov	r0, r5
 8007576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007578:	f000 f826 	bl	80075c8 <_malloc_usable_size_r>
 800757c:	42a0      	cmp	r0, r4
 800757e:	d20f      	bcs.n	80075a0 <_realloc_r+0x48>
 8007580:	4621      	mov	r1, r4
 8007582:	4638      	mov	r0, r7
 8007584:	f7ff ff8e 	bl	80074a4 <_malloc_r>
 8007588:	4605      	mov	r5, r0
 800758a:	2800      	cmp	r0, #0
 800758c:	d0f2      	beq.n	8007574 <_realloc_r+0x1c>
 800758e:	4631      	mov	r1, r6
 8007590:	4622      	mov	r2, r4
 8007592:	f7ff ff15 	bl	80073c0 <memcpy>
 8007596:	4631      	mov	r1, r6
 8007598:	4638      	mov	r0, r7
 800759a:	f7ff ff35 	bl	8007408 <_free_r>
 800759e:	e7e9      	b.n	8007574 <_realloc_r+0x1c>
 80075a0:	4635      	mov	r5, r6
 80075a2:	e7e7      	b.n	8007574 <_realloc_r+0x1c>

080075a4 <_sbrk_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	4c06      	ldr	r4, [pc, #24]	; (80075c0 <_sbrk_r+0x1c>)
 80075a8:	2300      	movs	r3, #0
 80075aa:	4605      	mov	r5, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	f7fd fb14 	bl	8004bdc <_sbrk>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_sbrk_r+0x1a>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	b103      	cbz	r3, 80075be <_sbrk_r+0x1a>
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	2000064c 	.word	0x2000064c

080075c4 <__malloc_lock>:
 80075c4:	4770      	bx	lr

080075c6 <__malloc_unlock>:
 80075c6:	4770      	bx	lr

080075c8 <_malloc_usable_size_r>:
 80075c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075cc:	1f18      	subs	r0, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfbc      	itt	lt
 80075d2:	580b      	ldrlt	r3, [r1, r0]
 80075d4:	18c0      	addlt	r0, r0, r3
 80075d6:	4770      	bx	lr

080075d8 <_init>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr

080075e4 <_fini>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr
